{
  "hash": "61d6418c57258c059da88792d053c8da",
  "result": {
    "markdown": "---\ntitle: \"Custom Shiny Input\"\nauthor: \"Maya Gans\"\ndate: '2021-08-30'\ndescription: \"Creating a custom Shiny Input\"\ncategories: [JavaScript]\nimage: \"featured.png\"\n---\n\n```{ojs}\n//| echo: false\ncolorScale = d3.scaleOrdinal().domain(['red', 'blue', 'yellow']).range(['red', 'blue', 'yellow'])\n```\n\n\n<div class=\"fake-shiny-container\">\n\n```{ojs}\n//| echo: false\nviewof shinyinput = {\n\n// instantiate value\nlet shinyinput = 'NULL'\n\nvar svg = d3.select(DOM.svg(width, 100))\n        .property(\"value\", shinyinput);\n\n///Create bars\nsvg.selectAll(\"circles\")\n  .data(['red', 'blue', 'yellow'])\n  .enter()\n  .append(\"circle\")\n  .attr(\"r\", 40)\n  .attr(\"cx\", function(d,i) { return 60 + (i*100) })\n  .attr(\"cy\", 50)\n  .attr(\"fill\", d => colorScale(d))\n  .attr('stroke', 'black')\n  .attr('stroke-width', 3)\n  .attr('data-value', d => d)\n  .attr('cursor', 'pointer')\n  // how do I set the dispatch to the value? \n  // R people: this is like shny.SetInputvalue(\"shinyinput\", shinyInput)\n  .on(\"click\", (event, d) => {\n      shinyinput = d\n      svg.property(\"value\", shinyinput).dispatch(\"input\");\n  });\n\n  return svg.node()\n}\n```\n\n\n<div class=\"answer-box\">\n\n```{ojs}\n//| echo: false\nshinyinput\n```\n\n</div>\n\n</div>\n\nWith a little bit of JQuery, the JavaScript function `Shiny.setInputValue` lets you take any HTML element and make it a Shiny `input` which I'll display here using a div called `all_circles` which contains three circles. Think of `all_circles` as a widget like `selectInput`, the circles themselves would then be the same as setting `choices`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselectInput(\"inputID\", \"Name to Display\", choices = c(\"Red Circle\", \"Yellow Circle\", \"Blue Circle\"))\n```\n:::\n\n\nBecause we can envision use cases to be beyond clicking on simple shapes, I wanted to use `SVGs`, which was my first learning curve.\n\n```html\n<svg class=\"circ\" height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle id ='circ_red' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red'/>\n</svg>\n```\n\nNote that the svg class is `circ` and the circle has the unique id `circ_red`. Repeating this code two more times but changing the fill to `blue` and `yellow` and the circle ids to `circ_blue` and `circ_yellow` yeilds three circles, all of the same class but with their own unique ids:\n\n<div class=\"text-center\">\n<svg class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n<circle id ='circ_red' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red'/>\n</svg>\n\n<svg id ='circ_blue' class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n<circle id ='circ_blue' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='blue' />\n</svg>\n\n<svg id ='circ_yellow'class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n<circle id ='circ_yellow' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='yellow'/>\n</svg>\n</div>\n\nShiny can take on a lot of HTML tags, but I found to properly render SVGs I needed to add a `uiOutput` to the UI portion of the app\n\n<!--\ndiv(id=\"all_circles\", uiOutput(\"svgout\")),\n-->\n\nAnd put the SVG code in a reactive within the server:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n output$svgout <- renderUI({\n    HTML(\n      \"<svg class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n        <circle id ='circ_red' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red'/>\n      </svg>\n      <svg id ='circ_blue' class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n        <circle id ='circ_blue' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='blue' />\n      </svg>\n      <svg id ='circ_yellow'class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n        <circle id ='circ_yellow' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='yellow'/>\n      </svg>\"\n    )\n  })\n```\n:::\n\n\nNote that I wrapped the SVG within a div called `all_circles` - this is the div that will act as our `selectInput`.\n\n## JavaScript Time!\n\nIn the next little chunk of code we use JQuery to go into the div of class `all_circles` and find the id of the `circ` class that was clicked on. We can then take that id and assign it as the value of the shiny input `all_circles`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  tags$script(HTML(\n    \"$('#all_circles').on('click', '.circ', (ev) => {\n        Shiny.setInputValue('all_circles', ev.target.id)\n        })\n        \"\n  ))\n```\n:::\n\n\nAnd there you have it! The `#` denotes that we're looking for an id and the `.` a class name. We're using a callback function to get the id of the clicked svg, which you can learn more about in some of my prior blog posts.\nBy adding `verbatimTextOutput(\"debug\")` and in the server `input$debug <- renderText(input$all_circles)` you'll see that the input changes from red to yellow to blue on click! \n\nMy revelation to set custom Shiny inputs was an incredibly powerful one that I needed to share, as it enables assigning whatever you want as an input with only a little bit of JQuery to find the elements you want to set as your `choices`. For instance, I used [This opensource library of a human body made fully with CSS and SVGs](https://github.com/volcanioo/Human-Body-Rendering-HTML) to create a `div` called `human_body`, then made the \"choices\" each of the body part SVGs. I hope this opens up new ways of exploring and interacting with data as it did for me!!\n\n<!--\n<iframe src=\"https://maya-gans.shinyapps.io/human_body_app/\" height = \"700px\" width = \"400px\"></iframe>\n-->\n\n<style>\n.fake-shiny-container {\n    background: white;\n    width: 100%;\n    border-radius: 15px;\n    padding: 20px;\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n.answer-box {\n  margin-top: 20px;\n  border-radius: 5px;\n  color: black;\n  text-align: left;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n}\n    \n#quarto-content {\n  margin-top: -10px !important;\n}\n\n.answerbox p {\n    margin-bottom: 0;\n}\n\n.circ {\n    cursor: pointer;\n}\n</style>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}