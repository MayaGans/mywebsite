[
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact Me",
    "section": "",
    "text": "Your email:  \n Your message:\n\n\n\n\nSend"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "maya gans",
    "section": "",
    "text": "import {chart, newData, updateBar} from \"@mayagans/continually-updating-bar-plot\"\nchart\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{\n  while (true) {\n    newData();\n    updateBar();\n    yield;\n    await Promises.delay(1300);\n  }\n}\n\n\n\n\n\n\n\n\n\nMAYA GANS\n\n\nData Visualization Engineer\n\n\n\n\nI graduated from the University of Wyoming with my Master’s in Science May 2019. My thesis was on the bacterial communities of a parasitic plant and how it interacts with fungi and adjacent trees. Working in ecology provided the foundation for studying complex, interconnected networks. My interests shifted from my study system to the statistical methods needed to model complex interactions and large datasets. After completing my degree, I worked at RStudio as an Intern where I created tidyblocks.tech, a blocks-based coding language to teach high school statistical students the fundamentals of programming.\nAfter my internship I have been applying my R and JavaScript skills as a web developer in the clinical trial space.\n\n\n\n\nExperience\n\n\n\n\n\nData Visualization Engineer\n2020-Present\nAtorus Research\nDesigning and developing software, end to end from user interface to technical application. Maintaining a code base using software versioning tools and continuous integration tests. Interfacing with clients and leading projects.\n\n\n\n\nStatistical Programmer\n2019-2020\nCytel Inc\nCreating custom Shiny applications In R using JavaScript and advanced R programming skills. Using GitHub to collaborate with a team of R programmers and create packages.\n\n\n\n\nJavaScript Developer\n2018-2019\nRStudio Inc\nUsing JavaScript and R to build TidyBlocks, a blocks-based coding language of the Tidyverse for data manipulation and visualization.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEducation\n\n\n\n\n\nMASTER OF SCIENCE\nUniversity of Wyoming\n2016-2019\n\n\n\n\nBACHELOR OF SCIENCEE\nFlorida International University\n2010-2014\n\n\n\n\n\n\nSkills\n\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\n\n\n\ngit\n\n\n\n\n\n\n\n\n\n\nJavaScript\n\n\n\n\n\n\n\n\n\n\nd3.js\n\n\n\n\n\n\n\n\n\n\nreact.js\n\n\n\n\n\n\n\n\n\n\n\n\nTalks and Publications\n\n\n\n\n\n\n\nGans, MR\nA Little JS Goes a Long Way\n\nRLadies Dammamm and RLadies Tunis\n\n\n\n\n\n\nGans, MR\nJS + R = Amazing Applications\n\nPhuse US 2021\n\n\n\n\n\n\nGans, MR\nStarting an R Book Club: Finding Friendship in Isolation\n\nrstudio::global(2021). January, 2021\n\n\n\n\n\n\nGans, MR\nEpisode 15\n\nShiny Developer Podcast\n\n\n\n\n\n\nGans, MR\nFrom Manuscript to R Package.\n\nINBRE Summer of Code. August 2020, Virtual\n\n\n\n\n\n\nGans, MR\nTidyCDISC\n\nR/Pharma, R/Medicine, and Phuse EU. September 2020, Virtual\n\n\n\n\n\n\nGans, MR\nTidyBlocks: using the language of the Tidyverse in a blocks-based interface\n\nRStudio Conference January 2020, San Francisco, CA\n\n\n\n\n\n\nGans, MR\nJavaScript for Data Science. CRC Press, 2020\n\nRStudio Conference January 2020, San Francisco, CA\n\n\n\n\n\n\n\n\nExpertise\n\n\n\n\n\ndata visualization\nhtmlwidgets\nshiny\npackage development\n\n\n\n\n\n\nAwards\n\n\n\n\n\n\nRSTUDIO TABLE CONTEST\nRunner-up: a Shiny GUI to generate clinical trial tables\n\n\n\n\nWILHELM G AND RAGNHIL D SOLHEIM MEMORIAL SCHOLORSHIP 2019\nTotaling $600 for an outstanding Botany graduate student\n\n\n\n\nDATA CARPENTRY 2018\nTotalling $1150 for certification to teach R Programming\n\n\n\n\nINSURETECH CONNECT 2018\nTotaling $1500 for registration to attend InsureTech Connect 2018 in Las Vegas, NV\n\n\n\n\nFISHER INNOVATION CHALLENGE 2018\nTotalling $31500 for technology start up seed funding\n\n\n\n\n\n\nHobbies\n\n\n\n\n\nrock climbing\nplaying bass\nmusic analytics\nstatistics"
  },
  {
    "objectID": "posts/skip-links/index.html",
    "href": "posts/skip-links/index.html",
    "title": "Skip Links",
    "section": "",
    "text": "I took Jon Kuperman’s amazing accessibility intro course on Frontend Masters and one of the coolest things he demonstrated was how to create a skip link. Skip links allow a keyboard only user to tab directly to the content of a page, rather than first tab through the page’s entire menu. In this post, I wanted to share what I learned as it applies to Shiny!\nI like to demonstrate where we’re going before I break it down. In the navbar below you see a link with the text “Skip to Main Content”. Clicking this link directs us to the button with the text “Tab Skip to Here!” [visible by the focus ring around the button]. In this post we’re going to create and style the skip link!"
  },
  {
    "objectID": "posts/skip-links/index.html#nav-bar",
    "href": "posts/skip-links/index.html#nav-bar",
    "title": "Skip Links",
    "section": "Nav Bar",
    "text": "Nav Bar\nIn Shiny, when we create a navigation bar, we get a <nav> element with the ARIA role “navigation”. The navbar contains a tabbable list with data-values set to the tab’s titles.\n\nshiny::navbarPage(\"App Title\",\n  shiny::tabPanel(\"Plot\"),\n  shiny::tabPanel(\"Summary\"),\n  shiny::tabPanel(\"Table\")\n)\n\n\n\nApp Title\n\n\n\nPlot\n\n\nSummary\n\n\nTable\n\n\n\n \n<nav class=\"navbar navbar-default navbar-static-top\" role=\"navigation\">\n  <div class=\"container-fluid\">\n    <div class=\"navbar-header\">\n      <span class=\"navbar-brand\">App Title</span>\n    </div>\n    <ul class=\"nav navbar-nav\" data-tabsetid=\"8029\">\n      <li class=\"active\">\n        <a href=\"#tab-8029-1\" data-toggle=\"tab\" data-value=\"Plot\">Plot</a>\n      </li>\n      <li>\n        <a href=\"#tab-8029-2\" data-toggle=\"tab\" data-value=\"Summary\">Summary</a>\n      </li>\n      <li>\n        <a href=\"#tab-8029-3\" data-toggle=\"tab\" data-value=\"Table\">Table</a>\n      </li>\n    </ul>\n  </div>\n</nav>\nNow, let’s imagine your navbar has some drop down menues. If the navbar has 20 tabbable items, the user is going to need to tab through to number 21 in order to get to the links on the page they are browsing!"
  },
  {
    "objectID": "posts/skip-links/index.html#create-a-link",
    "href": "posts/skip-links/index.html#create-a-link",
    "title": "Skip Links",
    "section": "Create a link",
    "text": "Create a link\nThe first step in creating a skip link is to create the link itself. Before our navbar let’s pre-append a link with the id=skiplink.\n\nshiny::tags$a(id=\"skiplink\", \"Skip to Main Content\")\n\n\n<a id=\"skiplink\">Skip to Main Content</a>"
  },
  {
    "objectID": "posts/skip-links/index.html#styling",
    "href": "posts/skip-links/index.html#styling",
    "title": "Skip Links",
    "section": "Styling",
    "text": "Styling\nNow let’s style the link as hidden when it’s not being tabbed/focused. We will do this by positioning the link out of frame using a transform.\nWe’ll also use the css pseudo class focus so that when the link is tabbed over it is put back in frame and made obvious to the user:\n#skiplink {\n  position: absolute;\n  transform: translateY(-100%);\n}\n\n#skiplink:focus {\n  transform: translateY(0%);\n  background-color: lightyellow;\n  padding: 20px;\n  z-index: 9999;\n}"
  },
  {
    "objectID": "posts/skip-links/index.html#link-re-direct",
    "href": "posts/skip-links/index.html#link-re-direct",
    "title": "Skip Links",
    "section": "Link Re-direct",
    "text": "Link Re-direct\nThe last step is to make our link go where we want it - to the first tabbable element on our page (“first-button”). We can do this by making the href of the link match the id of the first tabbable element:\n\nshiny::tags$a(id=\"skiplink\", \"Skip to Main Content\", href=\"first-button\")\n\n\n<a id=\"skiplink\" href=\"#first-button\">Skip to Main Content</a>"
  },
  {
    "objectID": "posts/skip-links/index.html#putting-it-all-together",
    "href": "posts/skip-links/index.html#putting-it-all-together",
    "title": "Skip Links",
    "section": "Putting it all together",
    "text": "Putting it all together\nNow we have a link before our navbar, followed by the content of our page and the css needed to style our link:\n\nshinyApp(\n  ui = basicPage(\n    tags$a(id=\"skiplink\", \"Skip to Main Content\", href=\"#first-button\"),\n    shiny::navbarPage(\"App Title\",\n                      shiny::tabPanel(\"Plot\"),\n                      shiny::tabPanel(\"Summary\"),\n                      shiny::tabPanel(\"Table\")\n    ),\n    tags$button(id=\"first-button\", \"Tab Skip to Here!\"),\n    tags$style(HTML(\"\n      #skiplink {\n        position: absolute;\n        transform: translateY(-100%);\n      }\n      #skiplink:focus {\n      transform: translateY(0%);\n      background-color: lightyellow;\n      padding: 20px;\n      z-index: 9999;\n      }\"))\n  ),\n  server = function(input, output) {\n  }\n)\n\n\nBy clicking tab to go forwards (or shift tab to go backwards), you should now be able to only see the skip link when it’s being focused on:\n Skip to Main Content\n\n\nApp Title\n\n\n\nPlot\n\n\nSummary\n\n\nTable\n\n\n\n\nTab Skip to Here!\n\n\n\nThere are SO many gems in Jon’s course, and it is genuinely fun to start to think about how to integrate these changes and make your website as accessible as possible. Shiny uses bootstrap, a design system that has put a lot of time and thought into accessibility so we get a lot for free, but I hope to continue this series with some other tips if you’re building any custom components."
  },
  {
    "objectID": "posts/javascript-statements/index.html",
    "href": "posts/javascript-statements/index.html",
    "title": "JavaScript Statements",
    "section": "",
    "text": "Computers are awesome for their ability to execute instructions. I mean, do you want to perform repetitive, error prone, menial tasks? Personally, I don’t want to spend time processing data, I just want to analyze it and eventually make pretty graphs. To do this though, the computer needs instructions, and these instructions come in the form of a list of statements. In this post I want to go over the grammar of JavaScript statements. Only by familiarizing ourselves with the entire toolbox of statement options can we efficiently boss the computer around exactly how we intend to."
  },
  {
    "objectID": "posts/javascript-statements/index.html#if",
    "href": "posts/javascript-statements/index.html#if",
    "title": "JavaScript Statements",
    "section": "If",
    "text": "If\nWe can use the if statement to run a function when an argument is true\nvar happy = TRUE\nvar knowIt = TRUE\n\nif (happy == TRUE && knowIt == TRUE) {\n  clapYourHands = TRUE\n}\n\nconsole.log(clapYourHands)\ntrue\nIf you’re Happy AND you know it, clapYourHands == TRUE."
  },
  {
    "objectID": "posts/javascript-statements/index.html#then",
    "href": "posts/javascript-statements/index.html#then",
    "title": "JavaScript Statements",
    "section": "Then",
    "text": "Then\nIn the code block above the curly brackets could be understood as then. Translating the block above into plain English: if happy and knowIt are both true then set clapYourHands to true."
  },
  {
    "objectID": "posts/javascript-statements/index.html#else",
    "href": "posts/javascript-statements/index.html#else",
    "title": "JavaScript Statements",
    "section": "Else",
    "text": "Else\nBut what if I want to set clapYourHands to false if you’re not happy? else gives us the ability to assign a different argument to clapYourHands if it fails the then test [here (happy == TRUE && knowIt == TRUE)]\nvar happy = false\nvar knowIt = true\n\nif (happy === true && knowIt === true) {\n  clapYourHands = true\n} else {\n  clapYourHands = false\n}\n\nconsole.log(clapYourHands)\ntrue"
  },
  {
    "objectID": "posts/javascript-statements/index.html#switch---case---break",
    "href": "posts/javascript-statements/index.html#switch---case---break",
    "title": "JavaScript Statements",
    "section": "Switch - Case - Break",
    "text": "Switch - Case - Break\nIn the example above happy and knowIt are binary, but the human gamut of emotions is far more complex than happy or not. This is where switch comes in. Rather than writing a long chain of {if this else if this other thing else if even more stuff else the default} we can just invoke a switch statement with multiple cases!\nvar emotion = \"disinterested\"\nvar clapYourHands = []\n\nswitch(emotion) {\n  case 'happy':\n    clapYourHands = true\n    break;\n  case 'sad':\n    clapYourHands = false\n    break;\n    // default = what to do when no cases match\n  default:\n    clapYourHands = \"Can't be sure\"\n}\n\nconsole.log(clapYourHands)\n\"Can't be sure\"\nThe switch statement goes through all the cases, trying to find a match for emotion. Once it finds a matching case, it applies the associated argument [here case = default;clapYourHands = \"Can't be sure\"].\nI also snuck in the break keyword because this is what gets us out of the switch block. By using break we’re saying - if this case is a match just use it, be done with the switch and move on with your life. Note that we don’t need to break the last statement in a switch, the computer knows it’s exhausted all options at that point."
  },
  {
    "objectID": "posts/javascript-statements/index.html#for",
    "href": "posts/javascript-statements/index.html#for",
    "title": "JavaScript Statements",
    "section": "For",
    "text": "For\nNo one ever wanted to be that solitary person clapping. Instead of using switch to evaluate a single emotion, we can use a for loop to assess all the emotions of our friends in the room, then gauge how many people are clapping.\n// create an array to capture the emotions in the room\nvar emotions = [\"disinterested\", \"happy\", \"sad\", \"happy\", \"dispondent\", \"happy\"]\n\n// this empty array will store the loop values\nvar whosClapping = []\n\nfor (i = 0; i < emotions.length; i++) { \n\n  switch(emotions[i]) {\n    case 'happy':\n      var clapYourHands = true\n      break;\n    case 'sad':\n      clapYourHands = false\n      break;\n    default:\n      clapYourHands = \"Can't be sure\"\n    }\n\n  whosClapping[i] = clapYourHands\n\n}\n\nconsole.log(whosClapping)\nconsole.log(whosClapping == true)\n[ 'Can't be sure', true, false, true, 'Can't be sure', true ]\na for loop begins with a counter, we’re calling it i and setting it to zero. The next argument is how many times you want the computer to run through the loop. Rather than count up the number of elements in our array in our heads and provide 6, we make the computer do the work for us! array.length gives back the number of elements in an array. i++ is shorthand to increment i by 1 as we progress through the loop.\nThe only difference in our switch within the loop is rather than reference emotion, we reference emotions[i]. For each turn through the loop the computer will evaluate the switch on the ith value within emotions\nBefore we let the computer move onto the next loop, we store the current iteration’s value for clapYourHands within the whosClapping array. whosClapping[0] will be the clapYourHands value for emotions[0] until the computer makes it through all 6 values within emotion."
  },
  {
    "objectID": "posts/javascript-statements/index.html#while",
    "href": "posts/javascript-statements/index.html#while",
    "title": "JavaScript Statements",
    "section": "While",
    "text": "While\nIf your friends aren’t responding when you ask them if you’re happy, we can make all 6 of them clap using a while loop.\nLike the for loop, a while loop also repeats until a condition changes. Unlike a for loop, we set a condition and loop through until the condition is no longer met [the opposite is true of a for loop where each time it runs the condition is looked for.]\nvar happy = 0\n\nwhile(happy < 6) {\n  console.log(\"clap your hands\")\n  i++\n}\nclap your hands\nclap your hands\nclap your hands\nclap your hands\nclap your hands\nclap your hands\nWe set our iterator to zero outside of the loop, then use the condition happy < 6 to run our loop 6 times."
  },
  {
    "objectID": "posts/javascript-statements/index.html#do",
    "href": "posts/javascript-statements/index.html#do",
    "title": "JavaScript Statements",
    "section": "Do",
    "text": "Do\nThe do loop is like the while loop but backwards. First the loop is executed, and the condition comes after the body\nvar happy = 0\n\ndo { \n  console.log(\"clap your hands\")\n  happy ++\n} while(happy < 6);\nclap your hands\nclap your hands\nclap your hands\nclap your hands\nclap your hands\nclap your hands\nWithin our do statement which gets everyone to clap, we also increment happy. The loop is executed until we reach happy == 6"
  },
  {
    "objectID": "posts/javascript-statements/index.html#return",
    "href": "posts/javascript-statements/index.html#return",
    "title": "JavaScript Statements",
    "section": "Return",
    "text": "Return\nWhen you write a function, return stops the function execution and returns the value\nfunction clapping(name) {\n  return name + \" is happy, and knows it\";\n}\n\nvar maya = clapping(\"Maya\")\nconsole.log(maya)\nMaya is happy, and knows it\nWe save the results of the function clapping('Maya') within a new variable, maya which is stored in memory, then use console.log to print the new variable. If we didn’t print maya to the console we’d only know the code ran because we didn’t get an error (silence is golden)."
  },
  {
    "objectID": "posts/javascript-statements/index.html#throw",
    "href": "posts/javascript-statements/index.html#throw",
    "title": "JavaScript Statements",
    "section": "Throw",
    "text": "Throw\nThe throw statement looks at an input and if it is wrong, creates a custom error message.\nfunction getClappers(i) {\n\n  if (i > 0) {\n    return \"Someone is happy\";\n  } else {\n    throw 'No one is happy';\n  }\n}\n\nconsole.log(getClappers(0))\nNo one is happy"
  },
  {
    "objectID": "posts/javascript-statements/index.html#try---catch",
    "href": "posts/javascript-statements/index.html#try---catch",
    "title": "JavaScript Statements",
    "section": "Try - Catch",
    "text": "Try - Catch\ntry...catch statements are used to catch errors, an inevitable part of programming that should be embraced early. We’ll demonstrate this using our getClappers function where rather than have the code stop running because no one is clapping, we’ll use catch to create a string stored in the variable happy.\nvar happy = []\ntry {\n  happy = getClappers(0)\n}\n catch {\n happy = 'No one is clapping'\n}\n\nconsole.log(happy)\nNo one is clapping\nBy setting our clapper number to zero, our try...catch statement returned the exception. When a script stops running due to an error we can leverage the code do something more than just dying."
  },
  {
    "objectID": "posts/javascript-statements/index.html#summary",
    "href": "posts/javascript-statements/index.html#summary",
    "title": "JavaScript Statements",
    "section": "Summary",
    "text": "Summary\nWe can use JavaScript statements to write programs to boss around the computer. We’ve covered some foundational statements here and I encourage you to play with them beyond our silly example. Beginning to grasp these statements makes me happy though, and we all deserve some claps for that."
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html",
    "href": "posts/npm-to-r/NPM-to-R.html",
    "title": "NPM to R!",
    "section": "",
    "text": "I’ve seen for people to import stuff into Observable notebooks using the notation:\nWhich I’ve essentially learned means library(\"maya_utils\") in R notation. I’ve made lots of R packages, but I’ve always wanted to learn how to make a JS library and publish it on NPM (basically JS’s CRAN but without any review), and then use the library in Observable (and now R via Quarto!)"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#steps",
    "href": "posts/npm-to-r/NPM-to-R.html#steps",
    "title": "NPM to R!",
    "section": "Steps:",
    "text": "Steps:\n\nCreate an NPM registry account\nWrite some code\nExport your module\nWrite some more code\nCombine functions in index.js\nBundle\nTest with mocha\nPublish the library\nUse in Observable (And R!)"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-1-create-an-npm-registry-account",
    "href": "posts/npm-to-r/NPM-to-R.html#step-1-create-an-npm-registry-account",
    "title": "NPM to R!",
    "section": "Step 1 Create an NPM registry account",
    "text": "Step 1 Create an NPM registry account\nMake an NPM account by signing up!"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-2-write-some-code",
    "href": "posts/npm-to-r/NPM-to-R.html#step-2-write-some-code",
    "title": "NPM to R!",
    "section": "Step 2 Write some code",
    "text": "Step 2 Write some code\nI created a folder called maya_utils, opened VSCode (sorry RStudio) and navigated to the terminal to initialize my package.json with the defaults (you can totally change these later):\nnpm init -y\nOpen the package.json file:\n{\n  \"name\": \"maya_utils\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\nThe file named in the main key, index.js in this case, will be the entry point in to your package after a user installs it. It will be what you export from this file that will give the user functionality once they have installed the package.\nNow create a folder called src and within it a file called removeDuplicates.js and we’ll put a single function in there, the code to remove duplicates:\nlet uniqueArr = []\nfunction removeDuplicates(arr){\n\n  // Accepts an array from which the duplicates\n  // will be removed\n  if (!Array.isArray(arr)){\n    arr = []\n  }\n\n  let theSet = new Set(arr)\n  let uniqueArr = [...theSet]\n\n  return uniqueArr\n}\nNow we’re going to add another file called index.js inside the src folder with the code:\nimport removeDuplicates from './removeArrayDuplicates';\n\nexport{\n  removeDuplicates\n}"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-3-export-functions",
    "href": "posts/npm-to-r/NPM-to-R.html#step-3-export-functions",
    "title": "NPM to R!",
    "section": "Step 3 Export functions",
    "text": "Step 3 Export functions\nIn R we need to source(file_name) in a script to expose that script to another file. In JavaScript we do this using ES6 module notation. In order to use the function removeDuplicates in other files we need to export it:\nexport default function removeDuplicates(arr) {"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-4-a-second-function",
    "href": "posts/npm-to-r/NPM-to-R.html#step-4-a-second-function",
    "title": "NPM to R!",
    "section": "Step 4: A second function!",
    "text": "Step 4: A second function!\nIn our src folder create a function called pluck to get the values for a key:\nexport default function pluck(key, array) {\n  return array.reduce((values, current) => {\n    values.push(current[key]);\n\n    return values;\n  }, [])\n}"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-5-combine-functions-in-index.js",
    "href": "posts/npm-to-r/NPM-to-R.html#step-5-combine-functions-in-index.js",
    "title": "NPM to R!",
    "section": "Step 5 Combine functions in index.js",
    "text": "Step 5 Combine functions in index.js\nNow we can create a file called index.js at the root level of our folder structure and within in export all the functions we want exposed to users. We can use the import function to grab the functions from their respective files. By exporting them here we’re essentially doing the same thing as a roxygen @export, exposing the functions to end users.\nimport removeDuplicates from \"./src/removeDuplicates\"\nimport pluck from \"./src/pluck\"\n\nexport {\n  removeDuplicates,\n  pluck\n}"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-6-bundle",
    "href": "posts/npm-to-r/NPM-to-R.html#step-6-bundle",
    "title": "NPM to R!",
    "section": "Step 6: Bundle!",
    "text": "Step 6: Bundle!\nThis was the most intimidating step for me because bundling and compiling JS code gives me a lot of imposter syndrome! Here’s an attempt to explain:\nIn order to use all the functions in the library within index.js we need to bundle all our code. This example has code in three files so far, replaceDuplicates.js, pluck.js and it’s collated in index.js. A bundler will take all the code and put it in one file for you!\nesbuild is the new hotness let’s use the library by typing this in the terminal\nnpm install esbuild\nand we can call our builder within our package.json script to take the code inside index.js and bundle it to out.js\n\"scripts\": {\n  \"build\": \"esbuild index.js --bundle --outfile=out.js\",\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n}\n./node_modules/.bin/esbuild index.js --bundle --outfile=out.js\nto bundle our code we run npm run build and you’ll see a file out.js is generated!"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-7-test-your-function",
    "href": "posts/npm-to-r/NPM-to-R.html#step-7-test-your-function",
    "title": "NPM to R!",
    "section": "Step 7 Test your function",
    "text": "Step 7 Test your function\nWe’re going to use the mocha library for testing our functions since I really like that it looks and feels like {testthat}\nnpm install --global mocha\nWe’ll also use this helper library mocha-esbuild to be able to use modules inside our tests, grabbing the functions from their original files.\nnpm i --save-dev @rtvision/mocha-esbuild\nBack in your package.json you want to change the script so that when we run npm test it runs the mocha function from mocha-esbuild and builds all the testing files inside our testing folder:\n\"scripts\": {\n  \"test\": \"npx mocha-esbuild \\\"test/**.js\\\"\"\n}\nWe’re also going to use chai because Node has built in assert functionality but we want to be able to use that in a more extensible way:\nnpm i --save-dev chai\nWithin a folder called test we’ll make a file called test_removeDuplicates and another called test_pluck. This is to demonstrate testing in multiple files but we could have just as well combined the tests in a single file!\nHere’s test_removeDuplicates\n'use strict'\n\nvar assert = require('chai').assert;\nimport removeDuplicates from \"../src/removeDuplicates.js\"\n\ndescribe('suite of utility functions inside removeDuplicates', function () {\n  describe('removing array duplicates', function () {\n    it('should return unique values', function () {\n        let myNums = [1,2,3,1,4,1,2,5,3,4];\n        assert.deepEqual([1, 2, 3, 4, 5], removeDuplicates(myNums));\n      });\n  });\n})\nAnd here is test_pluck\n'use strict'\n\nvar assert = require('chai').assert;\nimport pluck from \"../src/pluck.js\"\n\ndescribe('suite of utility functions inside pluck', function () {\n  describe('get all values in array of objects given a key', function () {\n    it('should return unique values', function () {\n        let myObj = [{name: 'Maya'}, {name: 'Jordan'}];\n        assert.deepEqual(['Maya', 'Jordan'], pluck('name', myObj));\n      });\n  });\n})\nNow you can run npm test in the terminal you should see this output:\n> npx mocha-esbuild \"test/**.js\"\n\nConfig processed, starting esbuild\nBuild was successful, running tests\n\n\n  suite of utility functions inside pluck\n    get all values in array of objects given a key\n      ✔ should return unique values\n\n  suite of utility functions inside removeDuplicates\n    removing array duplicates\n      ✔ should return unique values\n\n\n  2 passing (5ms)\nWoohoo our tests passed!"
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-7-publish-your-package-to-the-npm-registry",
    "href": "posts/npm-to-r/NPM-to-R.html#step-7-publish-your-package-to-the-npm-registry",
    "title": "NPM to R!",
    "section": "Step 7: Publish your package to the NPM registry",
    "text": "Step 7: Publish your package to the NPM registry\nLogin to npm using the command in the terminal\nnpm login\nFollow the prompts to enter your username, password, email, and two factor identification. Then register using:\nnpm register\nYou should get a notification in the terminal as well as an email confirming the success of your build."
  },
  {
    "objectID": "posts/npm-to-r/NPM-to-R.html#step-8-use-in-observable-and-r",
    "href": "posts/npm-to-r/NPM-to-R.html#step-8-use-in-observable-and-r",
    "title": "NPM to R!",
    "section": "Step 8: Use in Observable! And R!",
    "text": "Step 8: Use in Observable! And R!\nNow for the fun part! We can import our module into an Observable chunk using the following Skypack code. I knew to do this from this incredible notebook where you can input an NPM library (maya_utils) it shows you all your options for importing into Observable!\n\nmaya_utils = import('https://unpkg.com/maya_utils@1.1.0/index.js?module')\n\n\n\n\n\n\n\nNote my version is 1.1.0, I made a lot of mistakes and edits before finally getting this published!!\n\nNow we can access the removeDuplicates function and pluck function by prefixing with the library name (kind of like maya_utils::function_name)\n\nmaya_utils.removeDuplicates([1,2,2,3,4,5,6,6])\n\n\n\n\n\n\n\nmaya_utils.pluck('name', [{name: 'Batman'}, {name: 'Robin'}])\n\n\n\n\n\n\nBut the coolest part? With Quarto I can pass in R DATA INTO MY JAVASCRIPT LIBRARY?\n\nr_array <- round(rnorm(5, 20))\nojs_define(r_array)\n\n\nmaya_utils.removeDuplicates(r_array)\n\n\n\n\n\n\nWOULD YOU LOOK AT THAT?! ITS A THING OF BEAUTY! From JS to Observable to R! And we can even pass a reactive to our function when the Quarto document is of type Shiny!\nIt’s probably helpful to see the whole thing all together. Here’s my repo of utility functions, and a link to NPM!"
  },
  {
    "objectID": "posts/moving-dom-elements/index.html",
    "href": "posts/moving-dom-elements/index.html",
    "title": "Moving DOM Elements in Shiny",
    "section": "",
    "text": "As a Shiny web developer it’s really common to leverage existing packages to create your HTML. But what if a package gets you 90% of where you want to go, and you want to customize it a little?\nIn this tutorial I give a default DT table a small makeover by combining the datatable’s dataTables_length element and the datatables `dataTables_info element. How did I find the names of these elements? The inspector!\nMy goal is to combine these into a single element at the bottom of the table:"
  },
  {
    "objectID": "posts/moving-dom-elements/index.html#the-plan",
    "href": "posts/moving-dom-elements/index.html#the-plan",
    "title": "Moving DOM Elements in Shiny",
    "section": "The Plan",
    "text": "The Plan\nGiven the following Shiny app:\n\nlibrary(shiny)\n\nui <- fluidPage(\n  DT::dataTableOutput(\"table\")\n)\n\nserver <- function(input, output, session) {\n  output$table <- DT::renderDataTable(\n    data.frame(cars),\n    rownames = FALSE,\n    # I want to scroll the y-axis \n    # so the table is always the same height\n    options = list(\n      scrollY = '50vh'\n    )\n  )\n}\n\nshinyApp(ui, server)\n\nWe need to:\n\nStore the select within dataTables_length as an object\nCreate a new HTML element, new_bottom that we will use for our revamped dataTables_info\nAdd the preamble text Showing\nAppend the select dropdown from dataTables_length to the new element\nAdd the total number of rows information in R\nAdd the suffix text entries\nReplace dataTables_info with our new element\nGive the new element the dataTables_info class for styling\nRemove the dataTables_length node from the DOM"
  },
  {
    "objectID": "posts/moving-dom-elements/index.html#implementation",
    "href": "posts/moving-dom-elements/index.html#implementation",
    "title": "Moving DOM Elements in Shiny",
    "section": "Implementation",
    "text": "Implementation\nMy general workflow for applying JS to Shiny apps is to run the application and then actually do my manipulation in the browser’s console.\n\nStep 1\nUsing jQuery I stored the select dropdown to the object dropdown by finding the element of class dataTables_length, and then finding the select element inside it\nconst dropdown = $('.dataTables_length')\n                         .find('label')\n                         .find('select')\n\n\nStep 2 & 3\nNext I created a new DOM element, added the class custom_dropdown to make selecting the node easier, and added the prefix text Showing\nlet new_bottom = document.createElement('div')\nnew_bottom.classList.add('custom_dropdown')\nnew_bottom.innerHTML = 'Showing '\n\n\nStep 4\nUsing jQuery’s append function, we can add the isolated select to our new DOM element:\ndropdown.appendTo(new_bottom)\n\n\nStep 5 & 6\nAnd because we’re writing JS as a string in R we can interpolate the nrows number to use in the suffix text of 50 entries\nnew_bottom.append(' of ' +\", nrow(cars), \" + ' entries')\n\n\nStep 7\nNow we can replace the existing element with our new custom one!\n$('.dataTables_info').replaceWith(new_bottom)\n\n\nStep 8\nWe can remove the custom class we added, and give it the class dataTables_info so that the same styling of the old element is applied to our new one.\n$('.custom_dropdown')\n    .removeClass('custom_dropdown')\n    .addClass('dataTables_info') \n\n\nStep 9\nAnd now we can remove the dataTables_length element from the DOM!\n$('.dataTables_length').remove()"
  },
  {
    "objectID": "posts/moving-dom-elements/index.html#putting-it-all-together",
    "href": "posts/moving-dom-elements/index.html#putting-it-all-together",
    "title": "Moving DOM Elements in Shiny",
    "section": "Putting it All Together",
    "text": "Putting it All Together\nThe DT function renderDataTable function has a callback argument, a function that is run once the table is rendered. We can apply our JS here as a string:\nlibrary(shiny)\n\nui <- fluidPage(\n  DT::dataTableOutput(\"table\")\n)\n\nserver <- function(input, output, session) {\n  output$table <- DT::renderDataTable(\n    data.frame(cars),\n    rownames = FALSE,\n    options = list(\n      scrollY = '50vh'\n    ),\n    callback = DT::JS(paste0(\"\n     const dropdown = $('.dataTables_length')\n                         .find('label')\n                         .find('select')\n\n     let new_bottom = document.createElement('div')\n     new_bottom.classList.add('custom_dropdown')\n     new_bottom.innerHTML = 'Showing '\n     \n     dropdown.appendTo(new_bottom)\n                      \n     new_bottom.append(' of ' +\", nrow(cars), \" + ' entries')\n                      \n     $('.dataTables_info')\n          .replaceWith(new_bottom)\n                           \n     $('.custom_dropdown')\n         .removeClass('custom_dropdown')\n         .addClass('dataTables_info') \n                         \n     $('.dataTables_length').remove()\"))\n  )\n}\n\nshinyApp(ui, server)\nEt Viola! It’s a small UI fix that makes a world of difference!\nI leverage jQuery here a LOT because Shiny is already loading the library, but vanilla JS can do all of this now. I’m hoping to refactor this code to get more familiar with vanilla JS DOM manipulation: stay tuned for more!"
  },
  {
    "objectID": "posts/recursion-again-and-again-and-again/index.html",
    "href": "posts/recursion-again-and-again-and-again/index.html",
    "title": "Recursion again and again and again",
    "section": "",
    "text": "I’ve gotten pretty far in the past year and a half or so of my limited JavaScript knowledge, but I still have some glaring gaps that I’d like to address. My familiarity with recursive functions ends after the classic Fibonacci sequence or counter example. I found myself asking okay but when am I actually going to use this? There must be a time were recursion will shine and I can’t just brute force my way through with a for loop…. right?"
  },
  {
    "objectID": "posts/recursion-again-and-again-and-again/index.html#hierarchical-data",
    "href": "posts/recursion-again-and-again-and-again/index.html#hierarchical-data",
    "title": "Recursion again and again and again",
    "section": "Hierarchical Data!",
    "text": "Hierarchical Data!\nEnter hierarchical data. Let’s say you have hierarchical data represented in a flat structure. Here we have elements with an id, that each have a parent element. At the highest level we have body which doesn’t have a parent element, but both hand and foot have the body parent. Then finger has the parent hand and toe the parent foot. Let’s structure this data as a tree to represent these relationships better!\nlet anatomy = [\n { id: 'body',   parent: null },\n { id: 'hand',   parent: 'body' },\n { id: 'ring finger', parent: 'hand' },\n { id: 'pinky', parent: 'hand' },\n { id: 'foot',   parent: 'body' },\n { id: 'big toe',    parent: 'foot' }\n]"
  },
  {
    "objectID": "posts/recursion-again-and-again-and-again/index.html#the-recursive-function",
    "href": "posts/recursion-again-and-again-and-again/index.html#the-recursive-function",
    "title": "Recursion again and again and again",
    "section": "The recursive function",
    "text": "The recursive function\nThe logic behind our recursive function is that we need a function that will filter for each unique parent, then look for all the id’s that share that parent. Then the recursive function calls itself in order to make those id’s the next level’s parents:\nlet makeTree = (categories, parent) => {\n  // create a variable we can manipulate\n  let node = {}\n  \n  categories\n     // get the root parent (supplied in function as arg)\n    .filter(c => c.parent === parent)\n     // get all the ids with the specified parent\n    .forEach(c => node[c.id] = \n      // now make this same tree, \n      // but here we use the current id as the parent\n      makeTree(categories, c.id))\n  // the variable we manipulate is our output\n  return node\n}\n\nconsole.log(JSON.stringify(makeTree(anatomy, null)), null, 2)\n{\n  body: {\n    hand: {\n      \"ring finger\": {},\n      \"pinky\":{}\n    },\n    foot: {\n      \"big toe\": {}\n    }\n  }\n}\nIn the first loop, we pass in our object, anatomy and also pass in the root parent: null. For every body part we use forEach to assign the node (body) and give it the return value of the same function, but this time we’re not passing in anatomy, we’ve passed in body so it will return hand and foot - and we recurse down assigning all fingers to hand and toes to feet. This recursion happens all the way down until there are not properties left to assign.\nThis tree structure makes it quite obvious that body contains both hand and foot, which contains finger and toe respectively. A little more practical than the Fibonacci sequence example if you ask me…"
  },
  {
    "objectID": "posts/recursion-again-and-again-and-again/index.html#translating-into-r",
    "href": "posts/recursion-again-and-again-and-again/index.html#translating-into-r",
    "title": "Recursion again and again and again",
    "section": "Translating into R:",
    "text": "Translating into R:\nI wanted to translate this function into #rstats and of course Twitter came through. With the help of Jakub T. Jankiewicz we can translate this function above into #rstats using applys!\n\nGiven this list of lists:\n\nanatomy <- list(\n  list(id = 'body', parent = NULL),\n  list(id = 'hand', parent = 'body'),\n  list(id = 'ring finger', parent = 'hand'),\n  list(id = 'pinky', parent = 'hand'),\n  list(id = 'foot', parent = 'body'),\n  list(id = 'big toe', parent = 'foot')\n)\n\n\n\nWe can make our recursive function\nWe can create an empty list and filter it based on the selected parent argument. We use this same argument and assign it as the node id, then run the makeTree function on that node again, going deeper and deeper into the tree\n\nmakeTree <- function(categories, parent) {\n  node <- list()\n  filtered <- sapply(categories, function(c) {\n    identical(c$parent, parent)\n  })\n  lapply(categories[filtered], function(c) {\n    node[[c$id]] <<- makeTree(categories, c$id)\n  })\n  node\n}\n\nmakeTree(anatomy, NULL)\n\n$body\n$body$hand\n$body$hand$`ring finger`\nlist()\n\n$body$hand$pinky\nlist()\n\n\n$body$foot\n$body$foot$`big toe`\nlist()"
  },
  {
    "objectID": "posts/r-functions-i-took-for-granted/index.html",
    "href": "posts/r-functions-i-took-for-granted/index.html",
    "title": "R Functions I Took for Granted",
    "section": "",
    "text": "I’m always trying to sharpen my JavaScript skills and I thought a good way of doing this would be to turn some data frames I had lying around into JavaScript arrays of objects. What resulted is a love letter to the little R functions that are in actuality powerhouses and make our lives so easy because the best way I’ve seen to write these in JavaScript is, well, cray."
  },
  {
    "objectID": "posts/r-functions-i-took-for-granted/index.html#seq",
    "href": "posts/r-functions-i-took-for-granted/index.html#seq",
    "title": "R Functions I Took for Granted",
    "section": "seq",
    "text": "seq\nIn R the seq function lets us create a sequence of numbers by specifying where to start and where to finish. Done.\nIn JavaScript, the most concise way I’ve found to do this is create an empty array of the length of your sequence, spread it using ... so you get keys for each item, and then extract those keys to get a sequence of numbers!\n\n\nR:\n\nr_arr <- seq(0,10)\n\n[1]  0  1  2  3  4  5  6  7  8  9 10\n\n\nJS:\nlet js_arr = [...Array(11).keys()]\n(11) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  },
  {
    "objectID": "posts/r-functions-i-took-for-granted/index.html#seqs-by",
    "href": "posts/r-functions-i-took-for-granted/index.html#seqs-by",
    "title": "R Functions I Took for Granted",
    "section": "seq’s by",
    "text": "seq’s by\nseq also has a by argument, where we can specify by how much to increment the vector. In R if we want to create a sequence that increases by 0.5 we just add another argument by = 0.5!\nHowever, in JavaScript, the easiest way I’ve found is to take our initial array and multiply each number in the array by 0.5:\n\n\nR:\nseq(0,length(r_arr)/2, by = 0.5)\n0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5\n\n\nJS:\njs_arr.map(i => 0.5*i)\n(11) [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]"
  },
  {
    "objectID": "posts/r-functions-i-took-for-granted/index.html#rep",
    "href": "posts/r-functions-i-took-for-granted/index.html#rep",
    "title": "R Functions I Took for Granted",
    "section": "rep",
    "text": "rep\nIn R we can use the rep function to repeat whatever (5 and 10) we want in the first argument as many times length(r_arr) as the second argument.\nrep is by no means limited to two numbers, that just so happen to be divisible by one another, but I leveraged this for my approach. We can take our sequence array and map over it so that for each number we find it’s remainder when divided by two, giving us 0 or 1. In the case that it is 0 we end up multiplying 5 by 1, and in the case that the remainder is 1 we multiply 2 by 5 to get 10. This seems like a lot of trickery and problem solving for a little repeating sequence!!!\n\n\nR:\nrep(c(5,10), length(r_arr))\n [1]  5 10  5 10  5 10  5 10  5 10  5 10  5 10  5 10  5 10  5 10  5 10\n\n\nJS:\njs_arr.map(i => 5 * (1 + i%2))\n(11) [5, 10, 5, 10, 5, 10, 5, 10, 5, 10, 5]"
  },
  {
    "objectID": "posts/r-functions-i-took-for-granted/index.html#array-subsetting",
    "href": "posts/r-functions-i-took-for-granted/index.html#array-subsetting",
    "title": "R Functions I Took for Granted",
    "section": "Array subsetting",
    "text": "Array subsetting\nThis last one is an ode to subsetting with a special shout out to Nischal Shrestha. If I want to find the third, seventh, and tenth elements in my array, all we need in R are some brackets!\n\n\nR:\nr_subset = c(2,6,9) +1 ## +1 will make R == JS\nr_arr[r_subset]\n[1] 2 6 9\n\n\nJS:\njs_subset = [2,6,9]\njs_arr.filter((_, index) => js_subset.includes(index));\n(3) [2, 6, 9]\n\n\n\n\nTwitter Update\n\n\nUnique\n@daranzolin reccomended adding unique to the list! In JavaScript we can pass the entire array into filter where we can use the logic: (1) return the index of the current letter in the array. This will return the first time we see, “a”, “b”, or “c”. If that is equal to the current index, that means we have a new letter and will keep it, otherwise we can throw that letter away. In R, well, we can just use unique!\n\n\nR:\nabc <- c(\"a\", \"b\", \"b\", \"c\", \"b\", \"c\")\nunique <- unique(abc)\nprint(unique)\n[1] \"a\" \"b\" \"c\"\n\n\nJS:\nlet abc = [\"a\", \"b\", \"b\", \"c\", \"b\", \"c\"];\nlet unique = letters.filter((item, i, ar) => ar.indexOf(item) === i);\nconsole.log(unique);\n(3) [\"a\", \"b\", \"c\"]\n\n\n\n\nPaste\n@MattDzugan bought up the real MVP, paste: a lovely, vectorized hero. In order to do this in JS my solution was to map over the first vector, and return the letter vector with the same index of the number vector:\n\n\nR:\nabc <- c(\"a\", \"b\", \"c\")\nnumb <- c(1:3)\npaste(abc, numb)\n[1] \"a 1\" \"b 2\" \"c 3\"\n\n\nJS:\nlet abc = [\"a\", \"b\", \"c\"]\nlet numb = [1,2,3]\nabc.map((letter, i) => (letter + \" \" + numb[i]))\n(3) [\"a 1\", \"b 2\", \"c 3\"]\n\n\n\n\nIn this post I’m focusing on base R functions because I can write an entire tome on translating tidyverse functions and ggplot2…. In short thank your local R developer, and it’s pretty fun to push yourself to write functions in other languages!\nHave any other operations you’d like to add? Find me on twitter and I’d love to add it!"
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html",
    "href": "posts/d3-to-r-to-d3/index.html",
    "title": "D3 to R to D3",
    "section": "",
    "text": "I can’t tell you how many times I’ve tried to “learn” d3.js. I end up making it maybe a third of the way through a book before giving up and just looking through bl.ocks or Observable Notebooks because I want to make a plot now, not once I’ve read a text book.\nI’m writing this blog post because I am absolutely in LOVE with Amelia Wattenberger’s Fullstack Data Visualization with D3. I’m one chapter in and we already made a plot!\nAmelia breaks down chart creation into 7 parts:\nThis is interesting to contrast with R where we have step 1, and make the call to the function ggplot2 for step 2, but then can fastworward straight to step 5, and let ggplot figure out steps 3,4, and 6 for us!\nd3.js requires us to create the entire universe our plot lives in, and the axes for the plot seperately. You need to answer questions like how big is the area for your plot + axes and legend (peripherals) and then how do you want to scale your data to the pixel size of that plot since it wont be 1 to 1!"
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html#our-plot",
    "href": "posts/d3-to-r-to-d3/index.html#our-plot",
    "title": "D3 to R to D3",
    "section": "Our Plot",
    "text": "Our Plot\nThe plot in Chapter 1 is a line chart of weather data, with a shaded area to denote temperatures below freezing. One of the ways (maybe the only?) D3 is similar to ggplot2 is that once you have the code it’s pretty easy to just drop in different data, x, and y values.\nFor that reason, rather than just copy the book, I wanted to make the plot my own - which means Phish data and using the package { R2D3 }.\nI’m going to plot the song length of every time the band Phish played the song “Tweezer” live, and my shaded area will be around the mean."
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html#step-1-import-the-data",
    "href": "posts/d3-to-r-to-d3/index.html#step-1-import-the-data",
    "title": "D3 to R to D3",
    "section": "Step 1: Import the Data",
    "text": "Step 1: Import the Data\nd3.js expects a JSON object as the data input, but the R2D3 package lets us use data in our comfort zone! The R2D3 function takes on two main arguments: the data, and a javascript file containing our d3 code. That’s one less new step we need to learn!\nWe can use the phish.in API wrapper I created to grab the data:\n\nlibrary(dplyr)\n(\n  tweezer <- phishr::pi_get_songs(key, \"Tweezer\") %>%\n  select(date, duration)\n)\n\n…But now we’re going to have to head over into JavaScript world and create tweezer.js for steps 2-6."
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html#step-2-create-the-chart",
    "href": "posts/d3-to-r-to-d3/index.html#step-2-create-the-chart",
    "title": "D3 to R to D3",
    "section": "Step 2 Create the Chart",
    "text": "Step 2 Create the Chart\nI’m not going to re-explain the concepts in the book, you should read the book for that! I only want to talk about the differences in the code when translating it from the book to R.\nI had to change the width of the plot to a static number because the book sets the width of the plot based on the browser and I’m not entirely sure how R2D3 works but this was problematic…\nlet dimensions = {\n  width: 600, height: 400,\n  margin: {\n   top: 15,\n   right: 15,\n   bottom: 40,\n   left: 60,\n}, }"
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html#step-3-draw-a-canvass",
    "href": "posts/d3-to-r-to-d3/index.html#step-3-draw-a-canvass",
    "title": "D3 to R to D3",
    "section": "Step 3 Draw a Canvass",
    "text": "Step 3 Draw a Canvass\nThe biggest change in the code is that in the book we bind the visualization to a <div> called wrapper then append an svg but it seems that R2D3 takes care of this part for us and makes available an object called svg\nconst wrapper = d3.select(\"#wrapper\") \n    .append(\"svg\")\n    .attr(\"width\", dimensions.width)\n    .attr(\"height\", dimensions.height)\nBecomes\n// svg just exists for us! \nconst wrapper = svg\n    .attr(\"width\", dimensions.width)\n    .attr(\"height\", dimensions.height)\nI’d like to dig into my mental model a bit deeper for this but I think the magic of R2D3 is that instead of a div called wrapper markdown automatically creates an output div with an id, and R2D3 “knows” to bind the svg object to that created div… I think?"
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html#step-4-create-scales",
    "href": "posts/d3-to-r-to-d3/index.html#step-4-create-scales",
    "title": "D3 to R to D3",
    "section": "Step 4 Create Scales",
    "text": "Step 4 Create Scales\nThe code doesn’t change here but I wanted to plot my shaded area around the mean song length, rather than a box that starts at zero so I changed the code a little. If you don’t change this code you’ll still get the box from 0 to 32 on the y-axis.\nconst meanSongPlacement = yScale(d3.mean(data, yAccessor))\nmeanSong = bounds.append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"width\", dimensions.boundedWidth)\n    // we want the line to start 10 above the mean\n    .attr(\"y\", meanSongPlacement + 10)\n    // placeholder and end 10 below\n    .attr(\"height\", 20)\n    .attr(\"fill\", \"#e0f3f3\")"
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html#step-5-draw-data",
    "href": "posts/d3-to-r-to-d3/index.html#step-5-draw-data",
    "title": "D3 to R to D3",
    "section": "Step 5 Draw Data",
    "text": "Step 5 Draw Data\nThe only change here is that R2D3 expects our data to be called data and in the book it was dataset"
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html#step-6-draw-peripherals",
    "href": "posts/d3-to-r-to-d3/index.html#step-6-draw-peripherals",
    "title": "D3 to R to D3",
    "section": "Step 6 Draw Peripherals",
    "text": "Step 6 Draw Peripherals\nIn the book we moved the x-axis to the bottom of the svg using the style call. But this does not work in R2D3\nNick Strayer proposed this could be due to\n\ncss-based transforms of svg elements are either new enough to not work in the web-view of RStudio or they dont’ work in virtual dom like r2d3 uses.\n\nSo I changed the call from .style to .attr and it worked!\n.style(\"transform\", `translateY(${ dimensions.boundedHeight} px)`)\nBecomes\n.attr(\"transform\", `translate(0, ${dimensions.boundedHeight})`)"
  },
  {
    "objectID": "posts/d3-to-r-to-d3/index.html#put-it-together-in-r2d3",
    "href": "posts/d3-to-r-to-d3/index.html#put-it-together-in-r2d3",
    "title": "D3 to R to D3",
    "section": "Put it together in R2D3",
    "text": "Put it together in R2D3\nYou can find the JS code all together in my repo here but now all we need to do is specify our data and our js file!\nI added an argument to the options so my plot has the background color of my blog instead of a default white background\n\nr2d3::r2d3(data = tweezer, \n           \"tweezer.js\",\n           options = list(\"background\", \"#fadadd\"))\n\n\n\n\n\n\nIt looks like we can use the elementId argument in r2d3 to render our graphic to a specific div - I assume this is the same as declairing <div id=\"wrapper\"></div> in the book!\n\nAnd that’s it! I think a great workflow for creating these viz in the future will be making the plots in Observable, then making these small tweaks so I can use real data in R."
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html",
    "href": "posts/being-trendy-learning-svelte/index.html",
    "title": "Being Trendy, Learning Svelte",
    "section": "",
    "text": "Svelte is a compiler for creating reactive web applications. A reactive webapp reacts to data changes - it uses data when the state changes there is a reflection of that change in the browser. It bundles your JavaScript code into a single file for production without any extra scripts or libraries, resulting in a faster website!\nI’ve broken down this introduction into 8 pieces:"
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html#step-1-create-a-svelte-template",
    "href": "posts/being-trendy-learning-svelte/index.html#step-1-create-a-svelte-template",
    "title": "Being Trendy, Learning Svelte",
    "section": "Step 1: Create a Svelte Template",
    "text": "Step 1: Create a Svelte Template\nWe’ll first install the degit library which will allow us to clone a Svelte template, with some additional cool features you don’t get from plain old git.\nnpm install -g degit\nNow you can navigate to the directory you want to create your project in and type\ndegit sveltejs/template svelteproj\nWhich can be read as clone the template repository from sveltejs and put that in a folder locally called svelteproj\nThis gives us the starter file directory:\n|– public where the output production code is put to deploy  |—- favicon.png  |—- global.css  |—- index.html  |– scripts  |—- setupTypeScript.js  |– src - write all our source code  |—-App.svelte the svelte root component of the app  |—-main.js the main file to kickstart the app  |– .gitignore don’t include build file  |– package.json list dependencies and scripts  |– README.md help file  |– rollup.config.js watches, configures, and bundles code\nInstall the packages in our package.json file by running npm install. This adds a new folder to our directory, node_modules and a package-lock.json file:\n|– node_modules  |– public  |—- favicon.png  |—- global.css  |—- index.html  |– scripts  |—- setupTypeScript.js  |– src  |—-App.svelte  |—-main.js  |– .gitignore  |– package.json  |– package-lock.json  |– README.md  |– rollup.config.js\nNow we can look at the template locally by running npm run dev. This will prompt you to open your local host and see the webpage below:\n  Your application is ready~! 🚀\n\n  - Local:      http://localhost:5000\n  - Network:    Add `--host` to expose\n\n────────────────── LOGS ──────────────────\n\n\n\n\n\n\n\n\n\nThis is the content of our app, being driven within App.svelte:\n<script>\n    export let name;\n</script>\n\n<main>\n    <h1>Hello {name}!</h1>\n    <p>Visit the \n    <a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> \n    to learn how to build Svelte apps.\n    </p>\n</main>\n\n<style>\n    main {\n        text-align: center;\n        padding: 1em;\n        max-width: 240px;\n        margin: 0 auto;\n    }\n\n    h1 {\n        color: #ff3e00;\n        text-transform: uppercase;\n        font-size: 4em;\n        font-weight: 100;\n    }\n\n    @media (min-width: 640px) {\n        main {\n            max-width: none;\n        }\n    }\n</style>"
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html#step-2-edit-the-template",
    "href": "posts/being-trendy-learning-svelte/index.html#step-2-edit-the-template",
    "title": "Being Trendy, Learning Svelte",
    "section": "Step 2: Edit the Template",
    "text": "Step 2: Edit the Template\nIf you change any of this code and save it, the changes will be rendered automatically! Let’s try this by removing:\n<p>Visit the \n<a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a> \nto learn how to build Svelte apps.\n</p>\nand adding\n<p><My single page webapp</p>"
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html#step-3-understanding-components",
    "href": "posts/being-trendy-learning-svelte/index.html#step-3-understanding-components",
    "title": "Being Trendy, Learning Svelte",
    "section": "Step 3: Understanding Components",
    "text": "Step 3: Understanding Components\nWe write most of our code in the src folder, and this is where we create our app components. Think of components as lego blocks that Svelte will stack together into the DOM to create your website. All components must have the extension .svelte. Let’s look at the App.svelte component and break it down into it’s three elements:\n\nscript\nThe script is the component logic, here we are creating a variable called name\n<script>\n    export let name;\n</script>\n\n\nhtml template\nThis is the html to be injected into the DOM\n<main>\n    <h1>Hello {name}!</h1>\n    <p><My single page webapp</p>\n</main>\n\nstyle how to style the component that will be injected.\n\n<style>\n    main {\n        text-align: center;\n        padding: 1em;\n        max-width: 240px;\n        margin: 0 auto;\n    }\n\n    h1 {\n        color: #ff3e00;\n        text-transform: uppercase;\n        font-size: 4em;\n        font-weight: 100;\n    }\n\n    @media (min-width: 640px) {\n        main {\n            max-width: none;\n        }\n    }\n</style>"
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html#step-4-understanding-main.js",
    "href": "posts/being-trendy-learning-svelte/index.html#step-4-understanding-main.js",
    "title": "Being Trendy, Learning Svelte",
    "section": "Step 4: Understanding main.js",
    "text": "Step 4: Understanding main.js\nThis is the file that kickstarts the app and sets everything up for us:\nimport App from './App.svelte';\n\nconst app = new App({\n    target: document.body,\n    props: {\n        name: 'world'\n    }\n});\n\nexport default app;\nWe import the code from App.svelte, so that we can create a single instance of the component called app.\nIn this specific instance called app, we specify the target (where we want to put the html), and we’re putting it in the document.body.\nIf you navigate to public/html you’ll see:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset='utf-8'>\n    <meta name='viewport' content='width=device-width,initial-scale=1'>\n\n    <title>Svelte app</title>\n\n    <link rel='icon' type='image/png' href='/favicon.png'>\n    <link rel='stylesheet' href='/global.css'>\n    <link rel='stylesheet' href='/build/bundle.css'>\n\n    <script defer src='/build/bundle.js'></script>\n</head>\n\n<body> #<<\n</body> #<<\n</html>\nBy assigning the target to document.body we’re saying put our code inside those body tags. This is generally where component code will go but you can use whatever selectors you like!\nIn the second part of app we use props to pass data into the component. In the script portion of App.svelte we created a variable called name so that we can print Hello {name} in the html of the component. By assinging world to the name property, the app component will display Hello world."
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html#step-5-bundling",
    "href": "posts/being-trendy-learning-svelte/index.html#step-5-bundling",
    "title": "Being Trendy, Learning Svelte",
    "section": "Step 5: Bundling",
    "text": "Step 5: Bundling\nThis example has a single component but in reality we nest components and stack them together. All the scripts, styles and html from all our components are bundled together inside public/build and if we navigate back to our index.html we see that these bundled scripts are referenced inside the head of our page.\n<link rel='stylesheet' href='/build/bundle.css'>\n<script defer src='/build/bundle.js'></script>"
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html#step-6-make-it-reactive",
    "href": "posts/being-trendy-learning-svelte/index.html#step-6-make-it-reactive",
    "title": "Being Trendy, Learning Svelte",
    "section": "Step 6: Make it reactive",
    "text": "Step 6: Make it reactive\nIn our script we leverage the variable name but let’s modify that script a bit:\n<script>\n    export let name;\n</script>\nRather than export the name as a prop, we can give it a string value:\n<script>\n    let name = Maya;\n</script>\nTo demonstrate the reactivity of the page, we can create a button element in our html with an on click handler that will change the name displayed when clicked\n<main>\n    <h1>Hello {name}!</h1>\n    <p>My Single Page Webapp</p>\n    <button on:click={handleClick}>update name</button>\n</main>\nThen we need to add the handleClick function to our script code above:\n<script>\n    let name = 'Maya';\n    \n    const handleClick = () => {\n    name = 'Gans'\n    }\n</script>\non:click={handleClick} is Svelte syntax, which makes it really easy to react to and change dynamic data like our click event here. What happens when we build our project is it runs accross all our components, takes the Svelte syntax, and compules it all into vanialla JS. This compiled code can be seen in build/bundle.js [it’s 459 lines for this one little component - but all the hard work is done for us!]"
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html#step-7-creating-an-input-your-own-name",
    "href": "posts/being-trendy-learning-svelte/index.html#step-7-creating-an-input-your-own-name",
    "title": "Being Trendy, Learning Svelte",
    "section": "Step 7: Creating an input (your own name)",
    "text": "Step 7: Creating an input (your own name)\nLet’s finish off this introduction by creating an input so that the user can display their own name on the page, and rather than need to click a button it will dynamically update with typing.\nJust by adding an input element we see we can create a text field:\n<main>\n    <h1>Hello {name}!</h1>\n    <p>My Single Page Webapp</p>\n    <button on:click={handleClick}>update name</button>\n    <input type=\"text\">\n</main>\n\n\n\n\n\n\n\n\n\nJust as we created the handleClick even on click we want to create another input event tracker here that updates whenever the user types. We’ll call this function handleInput\n<input type=\"text\" on:input={handleInput}>\nNote that we are not invoking the function handleInput() as that would call the function when the page is loaded. Rather we want to call this function as a reference, only being called when the event occurs.\nNow let’s write the function logic. We want handleInput to take the value of the input and assign it to name. We can do this by giving the function the event parameter as an argument e which lets us access the target element (the input).\n<script>\n    let name = 'Maya';\n    \n    const handleClick = () => {\n      name = 'Gans'\n    }\n    \n    const handleInput = (e) => {\n     name = e.target.value\n    }\n</script>\nNow, everytime the user inputs text it is going to run the function and update the name in real time!\n\n…This is really cool but the binding is currently only one way. If we press the button and change name to Gans, the input text will not change to Gans (it remains Maya as pictured above)"
  },
  {
    "objectID": "posts/being-trendy-learning-svelte/index.html#step-8-two-way-binding",
    "href": "posts/being-trendy-learning-svelte/index.html#step-8-two-way-binding",
    "title": "Being Trendy, Learning Svelte",
    "section": "Step 8: Two way binding",
    "text": "Step 8: Two way binding\nWe can add a value property to our input to set it to the name variable so whenever name changes, the input value will be updated to reflect that\n<input type=\"text\" on:input={handleInput} value={name}>\n\n\nA Shortcut\nRather than writing the input element as we have, there is a Svelte shortcut for two way binding: we can use bind element to name.\n<input type=\"text\" bind:value={name}>\nAnd there you have it! A first contact introduction to Svelte. This was inspired by the The Net Ninja’s Tutorials which you can follow along with here. I’ve also included this code in a repo here.\nI put these skills to the test (and more!) by making a website to keep track of the Phish broadcasts entitled Dinner and a Movie. You can check out the repo here"
  },
  {
    "objectID": "posts/gsap-xaringan/index.html",
    "href": "posts/gsap-xaringan/index.html",
    "title": "GSap and Xaringan",
    "section": "",
    "text": "Greensock is a JavaScript library that lets you animate DOM elements. I’ve honestly learned everything I know about GSAP from their 20 minute tutorial video and trial and error. Here I’ll go over the three steps needed to animate an element of your Xaringan slides:"
  },
  {
    "objectID": "posts/gsap-xaringan/index.html#import-the-greensock-cdn",
    "href": "posts/gsap-xaringan/index.html#import-the-greensock-cdn",
    "title": "GSap and Xaringan",
    "section": "Import the Greensock CDN",
    "text": "Import the Greensock CDN\nI took the default YAML included in the Xaringan examples, then totally stole some code from the incredible Garrick Aden-Buie’s presentation. He adds the argument includes: in_header: head.html in the YAML where head.html includes what you want to load in the head of your slides. Your front matter should look a little something like this:\ntitle: \"A GSAP Tutorial\"\nsubtitle: \"Learn how to use GSAP animations in your slides!\"\nauthor: \"Maya Gans\"\noutput:\n  xaringan::moon_reader:\n    css: \"style.css\"\n    lib_dir: libs\n    nature:\n      highlightStyle: github\n      highlightLines: true\n      countIncrementalSlides: false\n    includes:\n      in_header: head.html\nAnd we’ll put the CDN for GSAP inside the head.html file:\n\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.1/gsap.min.js\"></script>\n\nAlright! Now we can use GSAP in our slides!"
  },
  {
    "objectID": "posts/gsap-xaringan/index.html#create-elements-to-animate",
    "href": "posts/gsap-xaringan/index.html#create-elements-to-animate",
    "title": "GSap and Xaringan",
    "section": "Create elements to animate",
    "text": "Create elements to animate\nSo we can use GSAP functions now but first we need to create elements to use those functions on. I’m going to add two images, similar to the GSAP video. I wrapped the two images below in a container and child div in order to center the images on the page.\n\n<div class=\"container\">\n  <div class=\"child\">\n  <img src = \"Rlogo.png\" class=\"r\"/>\n  <img src = \"gsap.png\" class=\"gsap\"/>\n  </div>\n</div>"
  },
  {
    "objectID": "posts/gsap-xaringan/index.html#gsap-code",
    "href": "posts/gsap-xaringan/index.html#gsap-code",
    "title": "GSap and Xaringan",
    "section": "GSAP Code",
    "text": "GSAP Code\nBefore we get to our goal of spinning these images in a circle, I want to break down what a GSAP “TWEEN”. Let’s simply start by using the to method to move our R logo from it’s start position 300 pixels to the right:\n\n\n\n\n\n\n\n\nBut Maya, I copied your code above and my animation occurs once - yours occurs on loop, it goes back and forth, and it even BOUNCES!\nI got fancy and added more to my configuration. I set repeat: -1 which means loop through my animation infinitely, and yoyo: true which means play my animation, then play it in reverse – try it!\nThere’s also an ease property if we want. We can use ease: \"bounce\" in our configuration to make the image look like its bouncing. GSAP includes a GUI explorer to look at different eases, and even create your own!"
  },
  {
    "objectID": "posts/gsap-xaringan/index.html#animate-around-center",
    "href": "posts/gsap-xaringan/index.html#animate-around-center",
    "title": "GSap and Xaringan",
    "section": "Animate around center",
    "text": "Animate around center\n\nStep 1: Use the set method to set the transform of each element to its center\ngsap.set(\".R, .gsap\", {transformOrigin: \"50% 50%\"});\nThere’s no duration here because it’s set immediately when called. GSAP uses the JavaScript function querySelectorAll for the target, so we can specify both elements in the same tween by comma seperating them!\n\n\nStep 2: Rotate\ngsap.to(\".R, .gsap\", {duration 2, rotation: 360})\n\n\nStep 3: Rotate inifinitely\nLet’s rotate the object by 360 degrees, and give the animation a duration of 2. Let’s also set the repeat to infinity:\ngsap.to(\".R, .gsap\", {duration: 2, rotation: 360, repeat: -1})\n\n\n\n\nPutting that together we can place our JS code under the R and GSAP images because they have to exist on the page prior to running our GSAP code:\n<script>\ngsap.set(\".R, .gsap\", {transformOrigin: \"50% 50%\"});\ngsap.to(\".R, .gsap\", {duration: 2, rotation: 360, repeat: -1})\n</script>\nAnd that’s all there is to it for including GSAP in R. To recap you need (1) GSAP in the head of the document, (2) the elements to animate, and (3) the GSAP JavaScript code to animate them. This is only the tiniest tip of the GSAP iceberg; you can create really cool timelines of animations which trigger one after the other. Hopefully this is enough to get you started. Have fun!"
  },
  {
    "objectID": "posts/custom-shiny-input/index.html",
    "href": "posts/custom-shiny-input/index.html",
    "title": "Custom Shiny Input",
    "section": "",
    "text": "colorScale = d3.scaleOrdinal().domain(['red', 'blue', 'yellow']).range(['red', 'blue', 'yellow'])\nWith a little bit of JQuery, the JavaScript function Shiny.setInputValue lets you take any HTML element and make it a Shiny input which I’ll display here using a div called all_circles which contains three circles. Think of all_circles as a widget like selectInput, the circles themselves would then be the same as setting choices.\nBecause we can envision use cases to be beyond clicking on simple shapes, I wanted to use SVGs, which was my first learning curve.\nNote that the svg class is circ and the circle has the unique id circ_red. Repeating this code two more times but changing the fill to blue and yellow and the circle ids to circ_blue and circ_yellow yeilds three circles, all of the same class but with their own unique ids:\nShiny can take on a lot of HTML tags, but I found to properly render SVGs I needed to add a uiOutput to the UI portion of the app\nAnd put the SVG code in a reactive within the server:\nNote that I wrapped the SVG within a div called all_circles - this is the div that will act as our selectInput."
  },
  {
    "objectID": "posts/custom-shiny-input/index.html#javascript-time",
    "href": "posts/custom-shiny-input/index.html#javascript-time",
    "title": "Custom Shiny Input",
    "section": "JavaScript Time!",
    "text": "JavaScript Time!\nIn the next little chunk of code we use JQuery to go into the div of class all_circles and find the id of the circ class that was clicked on. We can then take that id and assign it as the value of the shiny input all_circles.\n\n  tags$script(HTML(\n    \"$('#all_circles').on('click', '.circ', (ev) => {\n        Shiny.setInputValue('all_circles', ev.target.id)\n        })\n        \"\n  ))\n\nAnd there you have it! The # denotes that we’re looking for an id and the . a class name. We’re using a callback function to get the id of the clicked svg, which you can learn more about in some of my prior blog posts. By adding verbatimTextOutput(\"debug\") and in the server input$debug <- renderText(input$all_circles) you’ll see that the input changes from red to yellow to blue on click!\nMy revelation to set custom Shiny inputs was an incredibly powerful one that I needed to share, as it enables assigning whatever you want as an input with only a little bit of JQuery to find the elements you want to set as your choices. For instance, I used This opensource library of a human body made fully with CSS and SVGs to create a div called human_body, then made the “choices” each of the body part SVGs. I hope this opens up new ways of exploring and interacting with data as it did for me!!"
  },
  {
    "objectID": "posts/live-coding-interview/index.html",
    "href": "posts/live-coding-interview/index.html",
    "title": "My First Live Coding Interview",
    "section": "",
    "text": "Yesterday I interviewed for a position maintaining and creating ShinyApps. To call that a JOB is crazy to me. I love developing reactive web applications, the fact that you can get paid to do that is still mind blowing. I’m realizing that having fun at work is actually a possibility!\nThat said, the data scientist position usually includes a live coding portion. I went into it trying to treat my first one as practice, but every second I didn’t spend typing spanned an eternity. It was horrifying… but thinking about how to solve these questions was also kind of really fun?\nI’m fairly certain I won’t get the job. But I’m also certain it was an experience to learn and grow. The interview was so intense that it was pretty easy to recall the questions almost verbatim. I wanted to explore the questions again on my own with no pressure. And I’d love input on how to answer these more elegantly!"
  },
  {
    "objectID": "posts/live-coding-interview/index.html#question-1",
    "href": "posts/live-coding-interview/index.html#question-1",
    "title": "My First Live Coding Interview",
    "section": "Question 1",
    "text": "Question 1\nCreate a for loop for n iterations where every third iteration prints “buzz” and every fifth iteration prints “fizz”. Every combination prints “buzz-fizz”. Print the iterator for all other values.\n\nn = 30\n\nfor (i in 1:n) {\n  if (i %% 15 == 0) {\n    print(paste(i,\"buzz-fizz\"))\n      } else if (i %% 3 == 0) {\n        print(paste(i, \"buzz\"))\n      } else if (i %% 5 == 0) {\n        print(paste(i, \"fizz\"))\n      }\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] \"3 buzz\"\n[1] 3\n[1] 4\n[1] \"5 fizz\"\n[1] 5\n[1] \"6 buzz\"\n[1] 6\n[1] 7\n[1] 8\n[1] \"9 buzz\"\n[1] 9\n[1] \"10 fizz\"\n[1] 10\n[1] 11\n[1] \"12 buzz\"\n[1] 12\n[1] 13\n[1] 14\n[1] \"15 buzz-fizz\"\n[1] 15\n[1] 16\n[1] 17\n[1] \"18 buzz\"\n[1] 18\n[1] 19\n[1] \"20 fizz\"\n[1] 20\n[1] \"21 buzz\"\n[1] 21\n[1] 22\n[1] 23\n[1] \"24 buzz\"\n[1] 24\n[1] \"25 fizz\"\n[1] 25\n[1] 26\n[1] \"27 buzz\"\n[1] 27\n[1] 28\n[1] 29\n[1] \"30 buzz-fizz\"\n[1] 30\n\n\nMy first attempt answering the question revealed a gap in my mental model. I first attempted to construct the loop using an if statement with logical arguments in the same order as the question: (i %% 3 == 0), then (i %% 5 == 0) and lastly (i %% 15 == 0). I was operating under the idea that the arguments within a loop are circular. However, these arguments are inside an if statement, not the loop itself, so of course order matters! By putting (i %% 15 == 0) first you ensure the numbers divisible by both 3 and 5 are assigned to buzz-feed prior to buzz or feed assignment."
  },
  {
    "objectID": "posts/live-coding-interview/index.html#the-r-way",
    "href": "posts/live-coding-interview/index.html#the-r-way",
    "title": "My First Live Coding Interview",
    "section": "The R Way",
    "text": "The R Way\nR’s strength is in dealing with vectors, so leverage that in the approach! Jon Harmon suggested a better approach for this problem.\n\n    n = 15\n    dplyr::tibble(\n    iteration = seq_len(n),\n    output = dplyr::case_when(\n    iteration %% 15 == 0 ~ \"buzz-fizz\", \n    iteration %% 3 == 0 ~ \"buzz\",\n    iteration %% 5 == 0 ~ \"fizz\",\n    TRUE ~ as.character(iteration)\n  )\n)\n\n# A tibble: 15 x 2\n   iteration output   \n       <int> <chr>    \n 1         1 1        \n 2         2 2        \n 3         3 buzz     \n 4         4 4        \n 5         5 fizz     \n 6         6 buzz     \n 7         7 7        \n 8         8 8        \n 9         9 buzz     \n10        10 fizz     \n11        11 11       \n12        12 buzz     \n13        13 13       \n14        14 14       \n15        15 buzz-fizz\n\n\nIn fact, this same question is the first example within the dplyr::case_when documentation!"
  },
  {
    "objectID": "posts/live-coding-interview/index.html#question-2",
    "href": "posts/live-coding-interview/index.html#question-2",
    "title": "My First Live Coding Interview",
    "section": "Question 2",
    "text": "Question 2\n\nSummarize the diamonds data set\n\nsummary(ggplot2::diamonds)\n\n     carat               cut        color        clarity          depth      \n Min.   :0.2000   Fair     : 1610   D: 6775   SI1    :13065   Min.   :43.00  \n 1st Qu.:0.4000   Good     : 4906   E: 9797   VS2    :12258   1st Qu.:61.00  \n Median :0.7000   Very Good:12082   F: 9542   SI2    : 9194   Median :61.80  \n Mean   :0.7979   Premium  :13791   G:11292   VS1    : 8171   Mean   :61.75  \n 3rd Qu.:1.0400   Ideal    :21551   H: 8304   VVS2   : 5066   3rd Qu.:62.50  \n Max.   :5.0100                     I: 5422   VVS1   : 3655   Max.   :79.00  \n                                    J: 2808   (Other): 2531                  \n     table           price             x                y         \n Min.   :43.00   Min.   :  326   Min.   : 0.000   Min.   : 0.000  \n 1st Qu.:56.00   1st Qu.:  950   1st Qu.: 4.710   1st Qu.: 4.720  \n Median :57.00   Median : 2401   Median : 5.700   Median : 5.710  \n Mean   :57.46   Mean   : 3933   Mean   : 5.731   Mean   : 5.735  \n 3rd Qu.:59.00   3rd Qu.: 5324   3rd Qu.: 6.540   3rd Qu.: 6.540  \n Max.   :95.00   Max.   :18823   Max.   :10.740   Max.   :58.900  \n                                                                  \n       z         \n Min.   : 0.000  \n 1st Qu.: 2.910  \n Median : 3.530  \n Mean   : 3.539  \n 3rd Qu.: 4.040  \n Max.   :31.800  \n                 \n\n\nIn an attempt to over-complicate this question and to flex my tidyverse skills, I was quick to type diamonds %>% summarise(mean =....) but the instructor asked “Are you going to write the name of every column?” I panicked. I skipped this question finally remembered the summary function. (Clearly, base R functions are currently in the dark recesses of my mind. Use it or lose it…)\n\nFind the maximum diamond price\n\ndiamonds %>%\n  filter(price == max(price))\n\n# A tibble: 1 x 10\n  carat cut     color clarity depth table price     x     y     z\n  <dbl> <ord>   <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  2.29 Premium I     VS2      60.8    60 18823   8.5  8.47  5.16\n\n\nI was quick to type max(diamonds$price) and smugly said ‘Done!’ The interviewer responded, okay but I wanted to know everything else about that diamond. This meant I needed to print the whole row. I’m not sure the function I’m using is the most efficient, but I like it?\n\n\nCalculate the mean, median, standard deviation of the price for each diamond cut\n\nggplot2::diamonds %>%\n  group_by(cut) %>%\n  summarise(mean = mean(price),\n            med = median(price),\n            std = sd(price))\n\n# A tibble: 5 x 4\n  cut        mean   med   std\n  <ord>     <dbl> <dbl> <dbl>\n1 Fair      4359. 3282  3560.\n2 Good      3929. 3050. 3682.\n3 Very Good 3982. 2648  3936.\n4 Premium   4584. 3185  4349.\n5 Ideal     3458. 1810  3808.\n\n\nFinally a question I felt comfortable answering! My TidyBlocks focus of the past couple months made me feel quite comfortable with this one."
  },
  {
    "objectID": "posts/live-coding-interview/index.html#question-3",
    "href": "posts/live-coding-interview/index.html#question-3",
    "title": "My First Live Coding Interview",
    "section": "Question 3",
    "text": "Question 3\nUsing the MTCars data set, create a linear model to see the affect of mpg on disp and explain the output of the model\n\nm.1 <- lm(mtcars$mpg ~ mtcars$disp)\nsummary(m.1)\n\n\nCall:\nlm(formula = mtcars$mpg ~ mtcars$disp)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.8922 -2.2022 -0.9631  1.6272  7.2305 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 29.599855   1.229720  24.070  < 2e-16 ***\nmtcars$disp -0.041215   0.004712  -8.747 9.38e-10 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.251 on 30 degrees of freedom\nMultiple R-squared:  0.7183,    Adjusted R-squared:  0.709 \nF-statistic: 76.51 on 1 and 30 DF,  p-value: 9.38e-10\n\n\nHonestly, I could write this simple code from memory, but what I said as an explanation is an embarrassing blur. I think I can only attribute floundering over the output of a linear model with a single predictor to nerves.\nI’m taking the time here to break the output of the model summary down line for line because every aspiring data scientist should be so comfortable the lm output that even nerves shouldn’t matter.\n\nThe call is an R feature that shows the function and its parameters\nThe residuals are the difference between the model predicted and actual values of disp\nThe coefficents are the weights that minimize the sum of the square of the errors\n\nSince mpg never equals zero, there’s no intrinsic meaning to the intercept\nThe negative sign of disp means as mpg increases, disp decreases\n\nResidual standard error is the standard deviation of the error where the SD is the square root of the variance\nMultiple R squared is a measurement of how well the model fits your data\n\nAn R = 0.7 is pretty good?\n\nAdjusted R squared takes the amount of variables you add to the model into account as that will inevitably produce a better fit. Because we only have one predictor this number is only very slightly different from our R squared.\nF-Statistic a global statistic to check if at least one coefficient is non-zero."
  },
  {
    "objectID": "posts/live-coding-interview/index.html#question-4",
    "href": "posts/live-coding-interview/index.html#question-4",
    "title": "My First Live Coding Interview",
    "section": "Question 4",
    "text": "Question 4\nCreate a function that separates a list into two lists, one of unique values and the second containing the duplicates\n\nset.seed(42)\nmy_list <- list(round(runif(100, min=0, max=100)), 1)\n\nseperated <- function(input) {\n  dup <- unique(input[[1]][duplicated(input[[1]])])\n  unq <- input[[1]][!input[[1]] %in% input[[1]][duplicated(input[[1]])]]\n  return(list(dup, unq))\n}\n\nseperated(my_list)\n\n[[1]]\n [1] 46 94 91 74 39 83 64 97  4 26 51 68 98 69 14 72  1 38  0 78 56  9 21 93 33\n[26] 52 62\n\n[[2]]\n [1] 29 13 66 71 12 47 90 99 95  8 45 84 81 61 44 43 96 89 35 40 75 17 76 57 85\n[26] 19 27 24 22 48 20 58 16 36 65 23 31 67 73\n\n\nTo get there, I made a dummy data set to play with, a list with 6 numbers, only one of which is a duplicate. This helped to highlight the workflow (1) find the duplicates for the first list, then (2) find the unique values, but remove the duplicates\n\ntest <- list(c(1,2,3,4,5,3))\n\n# find duplicates\ntest[[1]][duplicated(test[[1]])]\n\n[1] 3\n\n# I thought of another case -\n# if we have muliple duplicates (three 3s)\n# we need to wrap this function in unique()\ntest2 <- list(c(1,2,3,4,5,3,3))\nunique(test2[[1]][duplicated(test2[[1]])])\n\n[1] 3\n\n# remove duplicates from unique values\ntest[[1]][!test[[1]] %in% test[[1]][duplicated(test[[1]])]]\n\n[1] 1 2 4 5\n\n\nObtaining the data from inside a list, especially nested lists, is a skill I know I need to build. This answer does not look elegant to me but it gets the job done? I’m going to play with “better”, cleaner solutions."
  },
  {
    "objectID": "posts/live-coding-interview/index.html#summary",
    "href": "posts/live-coding-interview/index.html#summary",
    "title": "My First Live Coding Interview",
    "section": "Summary",
    "text": "Summary\nI left the interview feeling exhausted and deflated. I found myself asking: if I can’t answer these questions, what am I doing trying to become a data scientist? But now that I’ve spent a day to reflect, the interview was an incredible learning experience. It pinpointed concrete areas where I can grow and I honestly had fun thinking about these problems. I’m not sure I’ll ever perform smoothly under pressure, but at the very least I now have a function to separate duplicates from unique values!"
  },
  {
    "objectID": "posts/why-would-i-settimeout0/index.html",
    "href": "posts/why-would-i-settimeout0/index.html",
    "title": "Why Would I setTimeout(0)?",
    "section": "",
    "text": "Do long calc - No Time Out\n\n\nNot Calculating yet.\n\n\n\n\nDo long calc - Time Out\n\n\nNot Calculating yet.\nAlong with the hands-on skills I’ve been learning during my internship with RStudio, I’ve also been bolstering my theoretical understandings of programming concepts. This brought me to a common trick setTimeout(0), which defers the execution of a function, giving something else a chance to run.\nThis concept was described using a concrete example in a StackOverflow post that I wanted to explore in more detail (both visually and without using JQuery):\nYou want to create a button on your website with two tasks (1) perform a long calculation (2) and to print “Calculating…” in a div until “Done!” can be printed."
  },
  {
    "objectID": "posts/why-would-i-settimeout0/index.html#create-button-in-html",
    "href": "posts/why-would-i-settimeout0/index.html#create-button-in-html",
    "title": "Why Would I setTimeout(0)?",
    "section": "CREATE BUTTON IN HTML",
    "text": "CREATE BUTTON IN HTML\nFirst we’ll create two buttons with div outputs to see the status of the calculation\n\nhtmltools::tags$table(border=1,\n  htmltools::tags$tr(\n    htmltools::tags$td(\n      htmltools::tags$button(\n        id =\"do\",\n        \"Do long calc - No Time Out\"\n      )\n    ),\n    htmltools::tags$td(\n      htmltools::tags$div(\n        id =\"status\",\n        \"Not Calculating yet.\"\n      )\n    )\n  ),\n    htmltools::tags$tr(\n    htmltools::tags$td(\n      htmltools::tags$button(\n        id =\"do_ok\",\n        \"Do long calc - Time Out\"\n      )\n    ),\n    htmltools::tags$td(\n      htmltools::tags$div(\n        id =\"status_ok\",\n        \"Not Calculating yet.\"\n      )\n    )\n  )\n)"
  },
  {
    "objectID": "posts/why-would-i-settimeout0/index.html#create-long-function",
    "href": "posts/why-would-i-settimeout0/index.html#create-long-function",
    "title": "Why Would I setTimeout(0)?",
    "section": "CREATE LONG FUNCTION",
    "text": "CREATE LONG FUNCTION\nCreate a function that takes a “long time” to run. When the function is done, it prints “Done!” to the div\nfunction long_running(statusId) {\n  var result = 0;\n  for (var i = 0; i < 1000; i++) {\n    for (var j = 0; j < 700; j++) {\n      for (var k = 0; k < 300; k++) {\n        result = result + i + j + k;\n      }\n    }\n  }\n  status_update(statusId, `Done!`);\n}"
  },
  {
    "objectID": "posts/why-would-i-settimeout0/index.html#create-status-update-function",
    "href": "posts/why-would-i-settimeout0/index.html#create-status-update-function",
    "title": "Why Would I setTimeout(0)?",
    "section": "CREATE STATUS UPDATE FUNCTION",
    "text": "CREATE STATUS UPDATE FUNCTION\nfunction status_update(statusId, message) {\n  document.getElementById(statusId).innerHTML = message;\n}"
  },
  {
    "objectID": "posts/why-would-i-settimeout0/index.html#put-it-all-together",
    "href": "posts/why-would-i-settimeout0/index.html#put-it-all-together",
    "title": "Why Would I setTimeout(0)?",
    "section": "PUT IT ALL TOGETHER",
    "text": "PUT IT ALL TOGETHER\nUpdate the div by using an Event Listener. When clicking the button run our long calculation and the status update.\ndocument.getElementById(\"do\").addEventListener(\"click\", function() {\n  long_running(\"status\");\n  status_update(\"status\", \"calculating...\");\n});"
  },
  {
    "objectID": "posts/why-would-i-settimeout0/index.html#fail",
    "href": "posts/why-would-i-settimeout0/index.html#fail",
    "title": "Why Would I setTimeout(0)?",
    "section": "FAIL",
    "text": "FAIL\nWithout using setTimeout(0) the queue of tasks that the button fires off are done serially: the long calculation “locks” the thread; the text is quickly set to “Done!” but the status_update function overwrites it with calculating...\n\nUsing setTimeout(0) is a nifty trick to defer the actual long calculations until status_update has been executed. By setting a timeout if 0, you are queuing asynchronous code until the engine executes the current call stack.\ndocument.getElementById(\"do_ok\").addEventListener(\"click\", function() {\n  setTimeout(function() {\n    long_running(\"status_ok\");\n  }, 0);\n    status_update(\"status_ok\", \"calculating....\");\n});\nIn the code chunk above the button text “Not calculating yet” will change to “Calculating….” and THEN “Done!”"
  },
  {
    "objectID": "posts/why-would-i-settimeout0/index.html#conclusion",
    "href": "posts/why-would-i-settimeout0/index.html#conclusion",
    "title": "Why Would I setTimeout(0)?",
    "section": "CONCLUSION",
    "text": "CONCLUSION\nJavaScript runtimes contain a message queue to store the list of messages to be processed (here “calculating…”). Because JavaScript is non-blocking, the messages can be queued in response to events (here: the long calculation). Using a simple event loop within our button, JavaScript enables the collection of asynchronous callbacks freeing the runtime to handle concurrent operations."
  },
  {
    "objectID": "posts/wtf-is-a-prototype/index.html#from-functions-to-object-constructors",
    "href": "posts/wtf-is-a-prototype/index.html#from-functions-to-object-constructors",
    "title": "WTF is a Prototype",
    "section": "From Functions to Object Constructors",
    "text": "From Functions to Object Constructors\nLet’s start with a function called Person. This function is a class, also called an object constructor because it provides a blueprint to create new objects. It is the conveyor belt on which are objects are made.\nfunction Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\nEvery object of class Person will accept two arguments, a string for first name and string for last name.\nlet maya = new Person('Maya','Gans');"
  },
  {
    "objectID": "posts/wtf-is-a-prototype/index.html#prototypes",
    "href": "posts/wtf-is-a-prototype/index.html#prototypes",
    "title": "WTF is a Prototype",
    "section": "Prototypes",
    "text": "Prototypes\nSo now we have a whole bunch of people with first and last names. What if we want each person to be able to access a function that prints their first and last name with a greeting? This is where prototypes come in.\nOur original class has two properties, and both are strings. But an object can have properties that are functions too! Here we create a function called sayHello which every person can access.\nPerson.prototype.sayHello = function() {\n  console.log(`Hello ${this.firstName} ${this.lastName}`)\n}\nmaya.SayHello()\nHello Maya Gans\n\n\nSince a prototype is an object, every new Person object now has access to this reference function. This is NOT the same as instance values like this.firstName which are not shared among objects."
  },
  {
    "objectID": "posts/wtf-is-a-prototype/index.html#prototype-inheritance",
    "href": "posts/wtf-is-a-prototype/index.html#prototype-inheritance",
    "title": "WTF is a Prototype",
    "section": "Prototype Inheritance",
    "text": "Prototype Inheritance\nIf it turns out we want to be more formal with our greeting, prototypes can be modified! We can modify or add new properties to all Person objects:\nPerson.prototype.sayHello = function() {\n  console.log(`Greetings ${this.firstName} ${this.lastName}`)\n}\nNot only can we create new objects to apply our updated function on, but even if we were to call this function on old objects the new definition of sayHello will be applied:\nconst jane = new Person('Jane', 'Doe');\njane.sayHello()\nmaya.sayHello()\nGreetings Jane Doe\nGreetings Maya Gans\nWe can see through this example the utility of being able to update prototypes. This doesn’t need to only be applied to objects you create, but you can import packages and modify them by creating new functions that objects can access.\nHowever a danger to be weary of is writing over an already existing function. For instance, what if we want a new object to be less formal but we’ve already written over sayHello? For this reason, rather than overwrite functions I recommend adding functions, calling our new function greetFormal."
  },
  {
    "objectID": "posts/wtf-is-a-prototype/index.html#giving-our-prototype-a-method",
    "href": "posts/wtf-is-a-prototype/index.html#giving-our-prototype-a-method",
    "title": "WTF is a Prototype",
    "section": "Giving our Prototype a Method",
    "text": "Giving our Prototype a Method\nAnother approach is to add a method to our greeting with a default value (but it can also take on their own instance properties). This can get tricky because the instance property has the same name as the prototype property.\nfunction Person(firstName, lastName, greeting) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n\n  if(greeting !== undefined) {\n    this.greeting = greeting\n  }\n}\nPerson.prototype.sayHello = function() {\n  console.log(`${this.greeting} ${this.firstName} ${this.lastName}`)\n}\nPerson.prototype.greeting = 'Hello';\nNow when we call sayHello it looks for an instance property called greeting. If greeting is supplied it will be used, otherwise the function will use its default value, the prototype property greeting: ‘Hello’.\nlet maya = new Person('Maya','Gans');\nlet jane = new Person('Jane', 'Doe', 'Howdy');\nmaya.SayHello()\njane.SayHello()\nHello Maya Gans\nHowdy Jane Doe\nWe can delete an instance value for a single person so that they return the default by writing delete jane.greeting\ndelete jane.greeting;\njane.sayHello()\nHello Jane Doe"
  },
  {
    "objectID": "posts/wtf-is-a-prototype/index.html#in-conclusion",
    "href": "posts/wtf-is-a-prototype/index.html#in-conclusion",
    "title": "WTF is a Prototype",
    "section": "In conclusion",
    "text": "In conclusion\nMost things in JavaScript have a prototype [including functions, objects, classes, numbers, and boolians]. A prototype is an object which has properties and values, and the value of that property will also have a prototype (see: Person.prototype.sayHello.prototype)"
  },
  {
    "objectID": "posts/wtf-is-a-prototype/index.html#this-post-covers",
    "href": "posts/wtf-is-a-prototype/index.html#this-post-covers",
    "title": "WTF is a Prototype",
    "section": "This Post Covers",
    "text": "This Post Covers\n\nInstance properties firstName, lastName\nPrototype properties sayHello, greeting\nthe value of these properties can be anything: object, function, string, so on\nPrototype inheritance sayHello\n\nHow that impacts objects created before/after that change\n\nWhat happens when an instance property has the same name as something on the prototype (greeting)"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "maya gans",
    "section": "",
    "text": "Libraries, Packages, and Visualizations I've worked on in Open Source\n\n\n\nshow all\n  javascript\n  shiny\n  r\n\n\n\n\n\n\n\n\n\na block based coding language to learn R programming\n\n\n\n\n\n\n\n\n\n\na custom shiny input boinding to click on body parts\n\n\n\n\n\n\n\n\n\n\nthe solution manual to Hadley Wickham's Mastering Shiny\n\n\n\n\n\n\n\n\n\n\na svelte application to look at Phish statistics\n\n\n\n\n\n\n\n\n\n\na custom htmlwidget of a github calendar using d3.js\n\n\n\n\n\n\n\n\n\n\na wrapper package around the phish.net API\n\n\n\n\n\n\n\n\n\n\na table generating GUI for clinical trial data\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "maya gans",
    "section": "",
    "text": "I am currently a Data Visualization Engineer at Atorus Research where I develop custom applications using R and JavaScript. As an RStudio intern I designed TidyBlocks, a visual block based programming language. I also co-wrote JavaScript for Data Science. I use ggplot2 and d3.js to create music related infographics for JamBase.com. When I’m not coding, I’m climbing tall mountains.\n\n\nInterests\n\n\nJavaScript\n\n\nd3.js\n\n\nShiny\n\n\nPlaying bass\n\n\nRock climbing\n\n\n\n\nEducation\n\n\n\n\n\nMSc in Botany, 2019\n\n\nUniversity of Wyoming\n\n\n\n\n\n\n\nBSc in Biology, 2016\n\n\nFlorida International University"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "maya gans",
    "section": "",
    "text": "Showcase of some of my data visualizations made in both R and JavaScript\n\n\n\n\n\nOde to Anni Albers\n\n\n\n\nOde to Sol Lewitt\n\n\n\n\nOde to Alfredo Hilto\n\n\n\n\nOde to Bridget Riley\n\n\n\n\nIje's Illusion\n\n\n\n\nPhish's Island Tour\n\n\n\n\nIje's Paths\n\n\n\n\nOde to Odili Donald Odita\n\n\n\n\nIje's Pie Chart\n\n\n\n\nShirley's Flowers\n\n\n\n\nIje's Spokes\n\n\n\n\nD3 Parade\n\n\n\n\nIje's Waves\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "maya gans",
    "section": "",
    "text": "explaining techinical concepts to myself\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          6 min read\n        \n  \n  \n  Making my first NPM library to use in Observable (and R!)\n  Aug 19, 2022\n\n\n\n\n\n\n\n\n\n    \n        \n          R\n        \n        \n          4 min read\n        \n  \n  \n  A datatable case study to move around DOM elements in Shiny.\n  Feb 15, 2022\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          5 min read\n        \n  \n  \n  Creating a Skip Link in Shiny apps!\n  Aug 30, 2021\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          3 min read\n        \n  \n  \n  Trying to understand recursion by explaining it.\n  Aug 30, 2021\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          3 min read\n        \n  \n  \n  An ongoing list of functions I took for granted in R as I learn JavaScript\n  Aug 30, 2021\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          11 min read\n        \n  \n  \n  Documenting using D3 in R (without Observable)\n  Aug 30, 2021\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          6 min read\n        \n  \n  \n  Documenting my first foray into the Svelte JavaScript frontend framework\n  Aug 30, 2021\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          3 min read\n        \n  \n  \n  Using the GSAP animation library in Xaringan slides\n  Aug 30, 2021\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          4 min read\n        \n  \n  \n  Creating a custom Shiny Input\n  Aug 14, 2020\n\n\n\n\n\n\n\n\n\n    \n        \n          R\n        \n        \n          6 min read\n        \n  \n  \n  I tanked my first live coding interview but that still made me want to find answers to all their questions\n  Aug 27, 2019\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          4 min read\n        \n  \n  \n  Trying to understand the weird world of async javascript\n  Aug 14, 2019\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          6 min read\n        \n  \n  \n  Statements aren't functions? Explaining the different and walking through some different JavaScript statements.\n  Aug 2, 2019\n\n\n\n\n\n\n\n\n\n    \n        \n          JavaScript\n        \n        \n          3 min read\n        \n  \n  \n  Walking through what JavaScript prototypes are so I can better understand them myself\n  Jul 22, 2019\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]