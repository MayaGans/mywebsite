{"title":"Custom Shiny Input","markdown":{"yaml":{"title":"Custom Shiny Input","author":"Maya Gans","date":"2021-08-30","description":"Creating a custom Shiny Input","categories":["JavaScript"],"image":"featured.png"},"headingText":"JavaScript Time!","containsRefs":false,"markdown":"\n\n<iframe src=\"https://maya-gans.shinyapps.io/clickable_svg/\" height = \"150px\" width = \"100%\"></iframe>\n\nWith a little bit of JQuery, the JavaScript function `Shiny.setInputValue` lets you take any HTML element and make it a Shiny `input` which I'll display here using a div called `all_circles` which contains three circles. Think of `all_circles` as a widget like `selectInput`, the circles themselves would then be the same as setting `choices`.\n\n```{#r}\nselectInput(\"inputID\", \"Name to Display\", choices = c(\"Red Circle\", \"Yellow Circle\", \"Blue Circle\"))\n```\n\nBecause we can envision use cases to be beyond clicking on simple shapes, I wanted to use `SVGs`, which was my first learning curve.\n\n```{html}\n<svg class=\"circ\" height=\"100\" width=\"100\" xmlns=\"http://www.w3.org/2000/svg\">\n  <circle id ='circ_red' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red'/>\n</svg>\n```\n\nNote that the svg class is `circ` and the circle has the unique id `circ_red`. Repeating this code two more times but changing the fill to `blue` and `yellow` and the circle ids to `circ_blue` and `circ_yellow` yeilds three circles, all of the same class but with their own unique ids:\n\n<div class=\"text-center\">\n<svg class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n<circle id ='circ_red' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red'/>\n</svg>\n\n<svg id ='circ_blue' class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n<circle id ='circ_blue' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='blue' />\n</svg>\n\n<svg id ='circ_yellow'class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n<circle id ='circ_yellow' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='yellow'/>\n</svg>\n</div>\n\nShiny can take on a lot of HTML tags, but I found to properly render SVGs I needed to add a `uiOutput` to the UI portion of the app\n\n```\ndiv(id=\"all_circles\", uiOutput(\"svgout\")),\n```\n\nAnd put the SVG code in a reactive within the server:\n\n```\n output$svgout <- renderUI({\n    HTML(\n      \"<svg class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n        <circle id ='circ_red' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='red'/>\n      </svg>\n      <svg id ='circ_blue' class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n        <circle id ='circ_blue' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='blue' />\n      </svg>\n      <svg id ='circ_yellow'class='circ' height='100' width='100' xmlns='http://www.w3.org/2000/svg'>\n        <circle id ='circ_yellow' cx='50' cy='50' r='40' stroke='black' stroke-width='3' fill='yellow'/>\n      </svg>\"\n    )\n  })\n}\n```\n\nNote that I wrapped the SVG within a div called `all_circles` - this is the div that will act as our `selectInput`.\n\n\nIn the next little chunk of code we use JQuery to go into the div of class `all_circles` and find the id of the `circ` class that was clicked on. We can then take that id and assign it as the value of the shiny input `all_circles`.\n\n```\n  tags$script(HTML(\n    \"$('#all_circles').on('click', '.circ', (ev) => {\n        Shiny.setInputValue('all_circles', ev.target.id)\n        })\n        \"\n  ))\n```\n\nAnd there you have it! The `#` denotes that we're looking for an id and the `.` a class name. We're using a callback function to get the id of the clicked svg, which you can learn more about in some of my prior blog posts.\nBy adding `verbatimTextOutput(\"debug\")` and in the server `input$debug <- renderText(input$all_circles)` you'll see that the input changes from red to yellow to blue on click! \n\nMy revelation to set custom Shiny inputs was an incredibly powerful one that I needed to share, as it enables assigning whatever you want as an input with only a little bit of JQuery to find the elements you want to set as your `choices`. For instance, I used [This opensource library of a human body made fully with CSS and SVGs](https://github.com/volcanioo/Human-Body-Rendering-HTML) to create a `div` called `human_body`, then made the \"choices\" each of the body part SVGs. I hope this opens up new ways of exploring and interacting with data as it did for me!!\n\n<iframe src=\"https://maya-gans.shinyapps.io/human_body_app/\" height = \"700px\" width = \"400px\"></iframe>"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../inst/css/styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","pagetitle":"Maya Gans","title-block-banner":true,"title":"Custom Shiny Input","author":"Maya Gans","date":"2021-08-30","description":"Creating a custom Shiny Input","categories":["JavaScript"],"image":"featured.png"},"extensions":{"book":{"multiFile":true}}}}}