{"title":"WTF is a Prototype","markdown":{"yaml":{"title":"WTF is a Prototype","author":"Maya Gans","date":"2019-07-22","description":"Walking through what JavaScript prototypes are so I can better understand them myself","categories":["JavaScript"],"image":"featured.png"},"headingText":"From Functions to Object Constructors","containsRefs":false,"markdown":"\n\n![](img1.png)\n\n\nLet's start with a function called `Person`. This function is a **class**, also called an *object constructor* because it provides a blueprint to create new objects. It is the conveyor belt on which are objects are made.\n\n```{js}\nfunction Person(firstName, lastName) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n}\n```\n\nEvery object of class `Person` will accept two arguments, a string for first name and string for last name.\n\n```{js}\nlet maya = new Person('Maya','Gans');\n```\n\n## Prototypes\n\nSo now we have a whole bunch of people with first and last names. What if we want each person to be able to access a function that prints their first and last name with a greeting? This is where `prototypes` come in. \n\nOur original class has two properties, and both are strings. But an object can have properties that are functions too! Here we create a function called `sayHello` which every person can access.\n\n```{js}\nPerson.prototype.sayHello = function() {\n  console.log(`Hello ${this.firstName} ${this.lastName}`)\n}\n```\n\n```{js}\nmaya.SayHello()\n```\n\n```{js}\nHello Maya Gans\n```\n\n\n<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@MayaJaffe/Prototypes?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\nSince a prototype is an object, every `new Person` object now has access to this reference function. This is NOT the same as **instance values** like `this.firstName` which are not shared among objects.\n\n## Prototype Inheritance\n\nIf it turns out we want to be more formal with our greeting, prototypes can be modified! We can modify or add new properties to all `Person` objects:\n\n```{js}\nPerson.prototype.sayHello = function() {\n  console.log(`Greetings ${this.firstName} ${this.lastName}`)\n}\n```\n\nNot only can we create new objects to apply our updated function on, but even if we were to call this function on old objects the new definition of `sayHello` will be applied:\n\n```{js}\nconst jane = new Person('Jane', 'Doe');\njane.sayHello()\nmaya.sayHello()\n```\n\n```{js}\nGreetings Jane Doe\nGreetings Maya Gans\n```\n\nWe can see through this example the utility of being able to update prototypes. This doesn't need to only be applied to objects you create, but you can import packages and modify them by creating new functions that objects can access. \n\n**However a danger to be weary of is writing over an already existing function**. For instance, what if we want a new object to be less formal but we've already written over `sayHello`? For this reason, rather than overwrite functions I recommend adding functions, calling our new function `greetFormal`.\n\n## Giving our Prototype a Method\n\nAnother approach is to add a method to our greeting with a default value (but it can also take on their own instance properties). This can get tricky because the instance property has the same name as the prototype property. \n\n```{js}\nfunction Person(firstName, lastName, greeting) {\n  this.firstName = firstName;\n  this.lastName = lastName;\n\n  if(greeting !== undefined) {\n    this.greeting = greeting\n  }\n}\nPerson.prototype.sayHello = function() {\n  console.log(`${this.greeting} ${this.firstName} ${this.lastName}`)\n}\nPerson.prototype.greeting = 'Hello';\n```\n\nNow when we call `sayHello` it looks for an instance property called greeting. If greeting is supplied it will be used, otherwise the function will use its default value, the prototype property greeting: 'Hello'.\n\n```{js}\nlet maya = new Person('Maya','Gans');\nlet jane = new Person('Jane', 'Doe', 'Howdy');\nmaya.SayHello()\njane.SayHello()\n```\n\n```{js}\nHello Maya Gans\nHowdy Jane Doe\n```\n\nWe can delete an instance value for a single person so that they return the default by writing `delete jane.greeting`\n\n```{js}\ndelete jane.greeting;\njane.sayHello()\n```\n\n```{js}\nHello Jane Doe\n```\n\n## In conclusion\n\nMost things in JavaScript have a prototype [including functions, objects, classes, numbers, and boolians]. A prototype is an object which has properties and values, and the value of that property will also have a prototype (see: `Person.prototype.sayHello.prototype`)\n\n## This Post Covers\n \n* **Instance properties** `firstName, lastName`\n* **Prototype properties** `sayHello, greeting`\n* the value of these properties can be anything: object, function, string, so on\n* Prototype inheritance `sayHello`\n    * How that impacts objects created before/after that change \n* What happens when an instance property has the same name as something on the prototype (greeting)\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../inst/css/styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","pagetitle":"Maya Gans","title-block-banner":true,"title":"WTF is a Prototype","author":"Maya Gans","date":"2019-07-22","description":"Walking through what JavaScript prototypes are so I can better understand them myself","categories":["JavaScript"],"image":"featured.png"},"extensions":{"book":{"multiFile":true}}}}}